import TelegramBot from "node-telegram-bot-api";

const TOKEN = `7279660476:AAGHOLKPGLzGTvMXff4mAYBZ8XnLrQV2e8w`;
const bot = new TelegramBot(TOKEN, { polling: true });
const fedotId = 870204479;

let usersData = [];

bot.setMyCommands([
  // {
  //   command: `/restart`,
  //   description: `–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üîÑÔ∏è`,
  // },
]);

async function first(chatId, messageId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    if (!dataAboutUser.ableback) {
      await bot
        .sendMessage(
          chatId,
          `<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> –≤ –º–∏—Ä —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å <b><i>neverfinished!</i></b>\n\n<b>‚Ä¢  –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üíØ</b>\n–í–µ–¥–∏ —É—á–µ—Ç —Å–≤–æ–∏—Ö –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã—Ö <b><i>—Ü–µ–ª–µ–π</i></b> –∏ –≤–µ–ª–∏–∫–∏—Ö <b><i>–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!</i></b>\n\n<b>‚Ä¢  –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ ‚ö°</b>\n–í—ã–ø–æ–ª–Ω—è–π —Å–≤–æ–∏ <b><i>–∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å</i></b>, –Ω–µ –∑–∞–±—ã–≤–∞—è –ø—Ä–æ <b><i>—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã!</i></b>\n\n<b>‚Ä¢  –û—Ç—á–µ—Ç –ø–æ –ª–∏—á–Ω—ã–º —Ä–µ–∫–æ—Ä–¥–∞–º üî•</b>\n–ü—Ä–æ–∫–∞—á–∏–≤–∞–π <b><i>–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É</i></b>, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–±–µ–¥–Ω—ã–µ —Å–µ—Ä–∏–∏ –Ω–∞–¥ <b><i>—Å–∞–º–∏–º —Å–æ–±–æ–π!</i></b>\n\n<b>‚Ä¢  –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–Ω–∞ ‚ú®</b>\n–£–ª—É—á—à–∞–π —Å–≤–æ–π <b><i>—Ä–µ–∂–∏–º —Å–Ω–∞</i></b> –∏ –ø—Ä–æ–≤–æ–¥–∏ –¥–µ–Ω—å <b><i>—ç–Ω–µ—Ä–≥–∏—á–Ω–µ–µ!</i></b>\n\n<b>üí™ –ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ —Å <i>neverfinished!</i></b>`,
          {
            parse_mode: `HTML`,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[{ text: `–î–∞–ª–µ–µ‚û°Ô∏è`, callback_data: `next` }]],
            },
          }
        )
        .then((message) => {
          dataAboutUser.messageId = message.message_id;
          dataAboutUser.ableback = true;
        });
    } else if (dataAboutUser.ableback) {
      await bot.editMessageText(
        `<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> –≤ –º–∏—Ä —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å <b><i>neverfinished!</i></b>\n\n<b>‚Ä¢  –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üíØ</b>\n–í–µ–¥–∏ —É—á–µ—Ç —Å–≤–æ–∏—Ö –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã—Ö <b><i>—Ü–µ–ª–µ–π</i></b> –∏ –≤–µ–ª–∏–∫–∏—Ö <b><i>–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!</i></b>\n\n<b>‚Ä¢  –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ ‚ö°</b>\n–í—ã–ø–æ–ª–Ω—è–π —Å–≤–æ–∏ <b><i>–∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å</i></b>, –Ω–µ –∑–∞–±—ã–≤–∞—è –ø—Ä–æ <b><i>—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã!</i></b>\n\n<b>‚Ä¢  –û—Ç—á–µ—Ç –ø–æ –ª–∏—á–Ω—ã–º —Ä–µ–∫–æ—Ä–¥–∞–º üî•</b>\n–ü—Ä–æ–∫–∞—á–∏–≤–∞–π <b><i>–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É</i></b>, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–±–µ–¥–Ω—ã–µ —Å–µ—Ä–∏–∏ –Ω–∞–¥ <b><i>—Å–∞–º–∏–º —Å–æ–±–æ–π!</i></b>\n\n<b>‚Ä¢  –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–Ω–∞ ‚ú®</b>\n–£–ª—É—á—à–∞–π —Å–≤–æ–π <b><i>—Ä–µ–∂–∏–º —Å–Ω–∞</i></b> –∏ –ø—Ä–æ–≤–æ–¥–∏ –¥–µ–Ω—å <b><i>—ç–Ω–µ—Ä–≥–∏—á–Ω–µ–µ!</i></b>\n\n<b>üí™ –ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ —Å <i>neverfinished!</i></b>`,
        {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `–î–∞–ª–µ–µ‚û°Ô∏è`, callback_data: `next` }]],
          },
        }
      );
    }
  } catch (error) {
    console.log(error);
  }
}

async function second(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(
      `<b>–ö–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º? ü§î</b>\n\n<b><i>(–ò–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)</i></b>\n\n<i><b>*neverfinished</b> –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü§´</i>`,
      {
        parse_mode: `HTML`,
        chat_id: chatId,
        message_id: dataAboutUser.messageId,
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: `–û—Å—Ç–∞–≤–∏—Ç—å ${dataAboutUser.username}‚úÖ`,
                callback_data: `leavename`,
              },
            ],
            [{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `back` }],
          ],
        },
      }
    );
  } catch (error) {
    console.log(error);
  }
}

async function menuNav(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(
      `<b>–ü—Ä–∏–≤–µ—Ç, ${dataAboutUser.username} üíØ</b>\n\n<b>–ö–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—èdddddddddd?</b>\n\n<a href="https://t.me/neverfinishedbot/?start=hideNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚áß</a>`,
      {
        parse_mode: `html`,
        chat_id: chatId,
        message_id: dataAboutUser.messageId,
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [
            [
              { text: `–¶–µ–ª–∏ üèî`, callback_data: `goal` },
              { text: `–ó–∞–¥–∞—á–∏ ‚ö°`, callback_data: `todo` },
            ],
            [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `achievement` }],
            [
              { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
              { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streak` },
            ],
          ],
        },
      }
    );
  } catch (error) {
    console.log(error);
  }
}

async function menu(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(
      `<b>–ü—Ä–∏–≤–µ—Ç, ${dataAboutUser.username} üíØ</b>\n\n<b>–ö–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è? </b>\n\n<a href="https://t.me/neverfinishedbot/?start=showNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</a>`,
      {
        parse_mode: `html`,
        chat_id: chatId,
        message_id: dataAboutUser.messageId,
        disable_web_page_preview: true,
        reply_markup: {
          inline_keyboard: [
            [
              { text: `–¶–µ–ª–∏ üèî`, callback_data: `goal` },
              { text: `–ó–∞–¥–∞—á–∏ ‚ö°`, callback_data: `todo` },
            ],
            [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `achievement` }],
            [
              { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
              { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streak` },
            ],
          ],
        },
      }
    );
  } catch (error) {
    console.log(error);
  }
}

async function todo(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>`, {
      parse_mode: `html`,
      chat_id: chatId,
      message_id: dataAboutUser.messageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [{ text: `- –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É -`, callback_data: `add_goal` }],
          [{ text: `- –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É -`, callback_data: `delete_goal` }],
          [{ text: `- –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É -`, callback_data: `add_time` }],
          [
            { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
            { text: `–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ`, callback_data: `goal_done` },
          ],
        ],
      },
    });
  } catch (error) {
    console.log(error);
  }
}

async function goal(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏ ü¶æ</b>`, {
      parse_mode: `html`,
      chat_id: chatId,
      message_id: dataAboutUser.messageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [{ text: `- –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å -`, callback_data: `add_goal` }],
          [{ text: `- –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å -`, callback_data: `delete_goal` }],
          [
            { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
            { text: `–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ`, callback_data: `goal_done` },
          ],
        ],
      },
    });
  } catch (error) {
    console.log(error);
  }
}

async function achievement(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏ ü¶æ</b>`, {
      parse_mode: `html`,
      chat_id: chatId,
      message_id: dataAboutUser.messageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [{ text: `- –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å -`, callback_data: `add_goal` }],
          [{ text: `- –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å -`, callback_data: `delete_goal` }],
          [
            { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
            { text: `–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ`, callback_data: `goal_done` },
          ],
        ],
      },
    });
  } catch (error) {
    console.log(error);
  }
}

async function sleep(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏ ü¶æ</b>`, {
      parse_mode: `html`,
      chat_id: chatId,
      message_id: dataAboutUser.messageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [{ text: `- –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å -`, callback_data: `add_goal` }],
          [{ text: `- –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å -`, callback_data: `delete_goal` }],
          [
            { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
            { text: `–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ`, callback_data: `goal_done` },
          ],
        ],
      },
    });
  } catch (error) {
    console.log(error);
  }
}

async function streak(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏ ü¶æ</b>`, {
      parse_mode: `html`,
      chat_id: chatId,
      message_id: dataAboutUser.messageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [{ text: `- –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å -`, callback_data: `add_goal` }],
          [{ text: `- –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å -`, callback_data: `delete_goal` }],
          [
            { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
            { text: `–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ`, callback_data: `goal_done` },
          ],
        ],
      },
    });
  } catch (error) {
    console.log(error);
  }
}

async function StartAll() {
  try {
    bot.on(`message`, async (message) => {
      let text = message.text;
      let chatId = message.chat.id;
      let messageId = message.message_id;

      usersData = [];

      const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

      if (!dataAboutUser) {
        usersData.push({
          chatId: chatId,
          username: message.from.first_name,
          messageId: ``,
          ableback: false,
        });
      }

      switch (text) {
        case `/start`: // TODO: remove user on start
          first(chatId);
          break;
        // case `/start showNav`: // TODO: add restart
        //   menu(chatId);
        //   break;
        // case `/start hideNav`:
        //   menu(chatId);
        //   break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
      }
      bot.deleteMessage(chatId, messageId);
      console.log(message);
    });
  } catch (error) {}

  try {
    bot.on(`callback_query`, async (query) => {
      let chatId = query.message.chat.id;
      let data = query.data;

      switch (data) {
        case `next`:
          second(chatId);
          break;
        case `menu`:
          menu(chatId);
          break;
        case `todo`:
          todo(chatId);
          break;
        case `goal`:
          goal(chatId);
          break;
        case `achievement`:
          achievement(chatId);
          break;
        case `sleep`:
          sleep(chatId);
          break;
        case `streak`:
          streak(chatId);
          break;
        case `back`:
          first(chatId);
          break;
        case `leavename`:
          menu(chatId);
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
      }
    });
  } catch (error) {}
}

StartAll();
