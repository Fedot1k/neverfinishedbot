import TelegramBot from "node-telegram-bot-api";

const TOKEN = "7279660476:AAGHOLKPGLzGTvMXff4mAYBZ8XnLrQV2e8w";

const bot = new TelegramBot(TOKEN, { polling: true });

let rndNum = 0;

async function StartAll() {
	try {
		bot.on("message", async (message) => {
			let text = message.text;
			let chatId = message.chat.id;
			let messageId = message.message_id;

			switch (text) {
                case "/start":
					bot.sendMessage(
						chatId,
						"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> <b>\n\nNeverFinished - –±–æ—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.</b> <i>\n\n–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ > –ú–æ—Ç–∏–≤–∞—Ü–∏—è</i>",
						{
							parse_mode: "HTML",
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[{ text: "–î–∞–ª–µ–µ", callback_data: "next" }],
								],
							},
						}
					);
					break;
			}

			bot.deleteMessage(chatId, messageId);
		});

		bot.on("callback_query", async (query) => {
			let chatId = query.message.chat.id;
			let data = query.data;
			let messageId = query.message.message_id;

            try {
                if (data.includes("button_")) {
                    let match = data.match(/^button_(.*)$/);
    
                    if (parseInt(match[1]) == rndNum) {
                        await bot.editMessageText(
                            `<b>–¢—ã –∫—Ä–∞—Å–∞–≤–∏—á–∫–∞!!! üëç\n\n</b>–û—Ç–≤–µ—Ç: <b>${rndNum}!</b>`,
                            {
                                parse_mode: "html",
                                chat_id: chatId,
                                message_id: messageId,
                                disable_web_page_preview: true,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ üîÉ", callback_data: "play" }],
                                    ],
                                },
                            }
                        );
                    } else {
                        await bot.editMessageText(
                            `<b>–¢—ã –Ω–µ –∫—Ä–∞—Å–∞–≤–∏—á–∫–∞!!! üò°\n\n</b>–û—Ç–≤–µ—Ç –≤–æ–æ–±—â–µ-—Ç–æ <b>${rndNum}!!!!!!</b>`,
                            {
                                parse_mode: "html",
                                chat_id: chatId,
                                message_id: messageId,
                                disable_web_page_preview: true,
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: "–î–∞–≤–∞–π –∑–∞–Ω–æ–≤–∞ üñï", callback_data: "play" }],
                                    ],
                                },
                            }
                        );
                    }
                }
            } catch (error) {
                
            }

			switch (data) {
				case "next":
					await bot.editMessageText(
						`<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ß–µ–º–ø–∏–æ–Ω üèÖ</b>\n\n<a href="https://t.me/digfusionbot/?start=showNavigationListInMenuHome">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é</a>`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{ text: "–ó–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å ‚ö°", callback_data: "todo" },
									],
									[
										{ text: "–¶–µ–ª–∏ üéØ", callback_data: "goals" },
									],
									[
										{ text: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ", callback_data: "achievements" },
									],
									[
										{ text: "–ü—Ä–∞–≤–∏–ª–∞ üìö", callback_data: "rules" },
									],
									[
										{ text: "–°–æ–Ω üåô", callback_data: "sleep" },
									],
								],
							},
						}
					);
					break;
				case "goals":
					await bot.editMessageText(
						`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏ ü¶æ</b>`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{ text: "- –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å -", callback_data: "add_goal" },
									],
									[
										{ text: "- –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å -", callback_data: "delete_goal" },
									],
									[
										{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "tomenu" },
										{ text: "–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ", callback_data: "goals_done" },
									],
								],
							},
						}
					);
					break;
				case "todo":
					await bot.editMessageText(
						`<b>–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{ text: "- –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É -", callback_data: "add_goal" },
									],
									[
										{ text: "- –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É -", callback_data: "delete_goal" },
									],
									[
										{ text: "- –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É -", callback_data: "add_time" },
									],
									[
										{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "tomenu" },
										{ text: "–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ", callback_data: "goals_done" },
									],
								],
							},
						}
					);
					break;
				case "tomenu":
					await bot.editMessageText(
						`<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ß–µ–º–ø–∏–æ–Ω üèÖ</b>\n\n<a href="https://t.me/digfusionbot/?start=showNavigationListInMenuHome">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é</a>`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{ text: "–ó–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å ‚ö°", callback_data: "todo" },
									],
									[
										{ text: "–¶–µ–ª–∏ üéØ", callback_data: "goals" },
									],
									[
										{ text: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ", callback_data: "achievements" },
									],
									[
										{ text: "–ü—Ä–∞–≤–∏–ª–∞ üìö", callback_data: "rules" },
									],
									[
										{ text: "–°–æ–Ω üåô", callback_data: "sleep" },
									],
								],
							},
						}
					);
					break;
			}
		});
	} catch (error) {}
}

StartAll();
