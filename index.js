import TelegramBot from "node-telegram-bot-api";
import cron from "node-cron";
import fs from "fs";

import { config } from "./config.js";
import { textData, buttonData, errorData, databaseBackup } from "./watcher.js";

const bot = new TelegramBot(config.TOKEN.Trial, { polling: true });

const botName = { Trial: `trialdynamicsbot`, Never: `neverfinishedbot` }.Trial;

let usersData = [];

bot.setMyCommands([{ command: `/start`, description: `–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üîÑÔ∏è` }]);

async function intro(chatId, type = `edit`) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (type) {
      case `send`:
        await bot.sendMessage(chatId, `„Ö§`).then((message) => {
          dataAboutUser.botMessageId = message.message_id;
          intro(chatId);
        });
        break;
      case `edit`:
        dataAboutUser.userAction = `regular`;
        await bot.editMessageText(
          `<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> –≤ –º–∏—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —Å <b><i>neverfinished!</i></b>\n\n<b>‚Ä¢  –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üíØ</b>\n–í–µ–¥–∏ —É—á–µ—Ç —Å–≤–æ–∏—Ö <b><i>—Ü–µ–ª–µ–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!</i></b>\n\n<b>‚Ä¢  –õ–∏—á–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã üî•</b>\n–ü—Ä–æ–∫–∞—á–∏–≤–∞–π <b><i>–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É</i></b>, –ø–æ–±–µ–∂–¥–∞—è <b><i>—Å–∞–º–æ–≥–æ —Å–µ–±—è!</i></b>\n\n<b>üí™ –ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ —Å <i>neverfinished!</i></b>`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[{ text: `–ü–æ–≥–Ω–∞–ª–∏ ‚û°Ô∏è`, callback_data: `introNext` }]],
            },
          }
        );
        break;
      case `greeting`:
        dataAboutUser.userAction = `getName`;
        await bot.editMessageText(
          `<b>–ö–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? ü§î</b>\n\n<i>–ù–µ –ø–∞—Ä—å—Å—è, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ ü§ù</i>`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–û—Å—Ç–∞–≤–∏—Ç—å ${dataAboutUser.login} ‚úÖ`,
                    callback_data: `keepName`,
                  },
                ],
                [{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `introBack` }],
              ],
            },
          }
        );
        break;
    }
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function goal(chatId, type = `show`) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  let selected;

  if (dataAboutUser.goalData.length) {
    selected = dataAboutUser.goalData[dataAboutUser.supportiveCount - 1];
  }

  try {
    switch (type) {
      case `show`:
        dataAboutUser.userAction = `goal`;
        await bot.editMessageText(
          `<b>–¢–≤–æ–∏ —Ü–µ–ª–∏, ${dataAboutUser.login} üèî</b>\n\n${
            dataAboutUser.goalData.length != 0
              ? `${!selected.marker ? selected.title : `‚òëÔ∏è ${selected.title}`}`
              : `<blockquote><b>–ú–µ—á—Ç—ã —ç—Ç–æ –Ω–µ —Ç–æ, —á—Ç–æ –≤—ã –≤–∏–¥–∏—Ç–µ –≤–æ —Å–Ω–µ. –≠—Ç–æ —Ç–æ, —á—Ç–æ –Ω–µ –¥–∞–µ—Ç –≤–∞–º —É—Å–Ω—É—Ç—å</b></blockquote><i> ~ –ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É üáµüáπ</i>`
          }`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `${dataAboutUser.goalData.length > 1 ? `üîº` : ``}`, callback_data: `goalBack` },
                  {
                    text: `${dataAboutUser.goalData.length != 0 ? `${dataAboutUser.supportiveCount}/${dataAboutUser.goalData.length}` : ``}`,
                    callback_data: `goalSelect`,
                  },
                  { text: `${dataAboutUser.goalData.length > 1 ? `üîΩ` : ``}`, callback_data: `goalNext` },
                ],
                [{ text: `–î–æ–±–∞–≤–∏—Ç—å ‚úçÔ∏è`, callback_data: `goalAdd` }],
                [
                  { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                  { text: `${dataAboutUser.goalData.length != 0 ? `–û—Ç–º–µ—Ç–∏—Ç—å${selected.marker ? ` ‚úÖ` : ``}` : ``}`, callback_data: `goalMark` },
                ],
              ],
            },
          }
        );
        break;
      case `add`:
        dataAboutUser.userAction = `goalAdding`;
        await bot.editMessageText(`<b>${dataAboutUser.goalData.length + 1}. –ù–æ–≤–∞—è —Ü–µ–ª—å üèî</b>\n\n–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.botMessageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `goal` }]],
          },
        });
        break;
      case `select`:
        dataAboutUser.userAction = `goalEditing`;
        await bot.editMessageText(
          `<b>${dataAboutUser.supportiveCount}. –¶–µ–ª—å üèî</b>\n\n${
            !selected.marker ? selected.title : `‚òëÔ∏è ${selected.title}`
          }\n\n–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `goal` },
                  { text: `–£–¥–∞–ª–∏—Ç—å üóë`, callback_data: `goalDelete` },
                ],
              ],
            },
          }
        );
        break;
    }
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function note(chatId, type = `show`) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  let selected;

  if (dataAboutUser.noteData.length) {
    selected = dataAboutUser.noteData[dataAboutUser.supportiveCount - 1];
  }

  try {
    switch (type) {
      case `show`:
        dataAboutUser.userAction = `note`;
        await bot.editMessageText(
          `<b>–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏, ${dataAboutUser.login} ‚ö°Ô∏è</b>\n\n${
            dataAboutUser.noteData.length != 0
              ? `${!selected.marker ? selected.title : `‚òëÔ∏è ${selected.title}`}`
              : `<blockquote><b>–ù–µ –ø–æ–∑–≤–æ–ª—è–π—Ç–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º –≤—Å—Ç–∞—Ç—å –Ω–∞ –ø—É—Ç–∏ –∫ –ø–æ–±–µ–¥–µ. –í—ã —Å–∏–ª—å–Ω–µ–µ —Ç–µ—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å</b></blockquote><i> ~ –ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É üáµüáπ</i>`
          }`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `${dataAboutUser.noteData.length > 1 ? `üîº` : ``}`, callback_data: `noteBack` },
                  {
                    text: `${dataAboutUser.noteData.length != 0 ? `${dataAboutUser.supportiveCount}/${dataAboutUser.noteData.length}` : ``}`,
                    callback_data: `noteSelect`,
                  },
                  { text: `${dataAboutUser.noteData.length > 1 ? `üîΩ` : ``}`, callback_data: `noteNext` },
                ],
                [{ text: `–î–æ–±–∞–≤–∏—Ç—å ‚úçÔ∏è`, callback_data: `noteAdd` }],
                [
                  { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                  { text: `${dataAboutUser.noteData.length != 0 ? `–û—Ç–º–µ—Ç–∏—Ç—å${selected.marker ? ` ‚úÖ` : ``}` : ``}`, callback_data: `noteMark` },
                ],
              ],
            },
          }
        );
        break;
      case `add`:
        dataAboutUser.userAction = `noteAdding`;
        await bot.editMessageText(`<b>${dataAboutUser.noteData.length + 1}. –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ ‚ö°Ô∏è</b>\n\n–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.botMessageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `note` }]],
          },
        });
        break;
      case `select`:
        dataAboutUser.userAction = `noteEditing`;
        await bot.editMessageText(
          `<b>${dataAboutUser.supportiveCount}. –ó–∞–º–µ—Ç–∫–∞ ‚ö°Ô∏è</b>\n\n${
            !selected.marker ? selected.title : `‚òëÔ∏è ${selected.title}`
          }\n\n–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `note` },
                  { text: `–£–¥–∞–ª–∏—Ç—å üóë`, callback_data: `noteDelete` },
                ],
              ],
            },
          }
        );
        break;
    }
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function feat(chatId, type = `show`) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  let selected;

  if (dataAboutUser.featData.length) {
    selected = dataAboutUser.featData[dataAboutUser.supportiveCount - 1];
  }

  try {
    switch (type) {
      case `show`:
        dataAboutUser.userAction = `feat`;
        await bot.editMessageText(
          `<b>–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, ${dataAboutUser.login} üéñ</b>\n\n${
            dataAboutUser.featData.length != 0
              ? `${!selected.marker ? selected.title : `‚òëÔ∏è ${selected.title}`}`
              : `<blockquote><b>–Ø –Ω–µ –±–µ–≥—É –∑–∞ —Ä–µ–∫–æ—Ä–¥–∞–º–∏. –†–µ–∫–æ—Ä–¥—ã –±–µ–≥—É—Ç –∑–∞ –º–Ω–æ–π</b></blockquote><i> ~ –ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É üáµüáπ</i>`
          }`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `${dataAboutUser.featData.length > 1 ? `üîº` : ``}`, callback_data: `featBack` },
                  {
                    text: `${dataAboutUser.featData.length != 0 ? `${dataAboutUser.supportiveCount}/${dataAboutUser.featData.length}` : ``}`,
                    callback_data: `featSelect`,
                  },
                  { text: `${dataAboutUser.featData.length > 1 ? `üîΩ` : ``}`, callback_data: `featNext` },
                ],
                [{ text: `–î–æ–±–∞–≤–∏—Ç—å ‚úçÔ∏è`, callback_data: `featAdd` }],
                [
                  { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                  { text: `${dataAboutUser.featData.length != 0 ? `–û—Ç–º–µ—Ç–∏—Ç—å${selected.marker ? ` ‚úÖ` : ``}` : ``}`, callback_data: `featMark` },
                ],
              ],
            },
          }
        );
        break;
      case `add`:
        dataAboutUser.userAction = `featAdding`;
        await bot.editMessageText(`<b>${dataAboutUser.featData.length + 1}. –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ üéñ</b>\n\n–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.botMessageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `feat` }]],
          },
        });
        break;
      case `select`:
        dataAboutUser.userAction = `featEditing`;
        await bot.editMessageText(
          `<b>${dataAboutUser.supportiveCount}. –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ üéñ</b>\n\n${
            !selected.marker ? selected.title : `‚òëÔ∏è ${selected.title}`
          }\n\n–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `feat` },
                  { text: `–£–¥–∞–ª–∏—Ç—å üóë`, callback_data: `featDelete` },
                ],
              ],
            },
          }
        );
        break;
    }
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function sleep(chatId, type = `show`) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (type) {
      case `show`:
        dataAboutUser.userAction = `sleep`;
        await bot.editMessageText(
          `<b>–¢–≤–æ–π —Å–æ–Ω, ${dataAboutUser.login} ‚ú®</b>\n\n${
            dataAboutUser.sleepData.length != 0
              ? `<b>üí§ ${dataAboutUser.sleepData[0].join(`:`)}\n‚òÄÔ∏è ${
                  dataAboutUser.sleepData.length == 2 ? `${dataAboutUser.sleepData[1].join(`:`)}` : `-`
                }</b>\n\n`
              : `<blockquote><b>–ö–æ–º—É-—Ç–æ —è –Ω—Ä–∞–≤–ª—é—Å—å, –∞ –∫–æ–º—É-—Ç–æ –Ω–µ—Ç. –Ø –æ—Ç —ç—Ç–æ–≥–æ –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–µ–π —Å—Ç—Ä–∞–¥–∞—Ç—å –Ω–µ –±—É–¥—É</b></blockquote><i> ~ –ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É üáµüáπ</i>`
          }`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [{ text: `${dataAboutUser.sleepData.length != 0 ? `–ò–∑–º–µ–Ω–∏—Ç—å ‚åöÔ∏è` : `–î–æ–±–∞–≤–∏—Ç—å ‚åöÔ∏è`}`, callback_data: `sleepAdd` }],
                [
                  { text: `‚ùï–°–æ–≤–µ—Ç—ã`, callback_data: `sleepTips` },
                  { text: `digfusion‚ùî`, callback_data: `digfusion` },
                ],
                [{ text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` }],
              ],
            },
          }
        );
        break;
      case `tips`:
        dataAboutUser.userAction = `regular`;
        await bot.editMessageText(
          `<b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ üí§\n\n–ü–µ—Ä–µ–¥ —Å–Ω–æ–º:</b>\n<blockquote><b>‚Ä¢ –û—Ç–∫–ª—é—á–∏ —Ç–µ–ª–µ—Ñ–æ–Ω üëÄ</b>\n–ò–∑–±–∞–≤–∏—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –º—ã—Å–ª–µ–π</blockquote>\n<blockquote><b>‚Ä¢ –°–æ–±–ª—é–¥–∞–π —Ç–µ–º–Ω–æ—Ç—É üåô</b>\n–ì–æ—Ä–∞–∑–¥–æ –±—ã—Å—Ç—Ä–µ–µ —É—Å–Ω–µ—à—å</blockquote>\n\n<b>–ü–æ—Å–ª–µ —Å–Ω–∞:</b>\n<blockquote><b>‚Ä¢ –ò–∑–±–µ–≥–∞–π —ç–∫—Ä–∞–Ω–æ–≤ üíª</b>\n–ù–µ–ª—å–∑—è –ø–æ—Ç–µ—Ä—è—Ç—å —Ñ–æ–∫—É—Å</blockquote>\n<blockquote><b>‚Ä¢ –ó–∞–π–º–∏—Å—å —Å–ø–æ—Ä—Ç–æ–º üßò</b>\n–ë—É–¥–µ—à—å —Å—É–ø–µ—Ä —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º</blockquote>`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `sleep` }]],
            },
          }
        );
        break;
      case `digfusion`:
        dataAboutUser.userAction = `regular`;
        await bot.editMessageText(
          `<b><i>‚ùîdigfusion ‚Ä¢ –û –Ω–∞—Å</i></b>\n\n<blockquote>–ö–æ–º–ø–∞–Ω–∏—è <b><i>digfusion</i></b> - <b>–Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å—Ç–∞—Ä—Ç–∞–ø,</b> —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π <b>—Å–≤–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b> –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —É—Å–ª—É–≥–∏ –ø–æ <b>—Å–æ–∑–¥–∞–Ω–∏—é —á–∞—Ç-–±–æ—Ç–æ–≤</b> —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤!\n\n–ë—ã—Å—Ç—Ä–æ, –Ω–∞–¥–µ–∂–Ω–æ –∏ —Å —É–º–æ–º. –ù–∞–º –¥–æ–≤–µ—Ä—è—é—Ç <b>–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏,</b> –∏ –º—ã –¥–µ–ª–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π <b>—Ü–µ–ø–ª—è–µ—Ç –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>\n\n<i>–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ <b>digfusion</b> —Å –¥—É—à–æ–π ü§ç</i></blockquote>\n\n<b><a href="https://digfusion.ru/">–°–∞–π—Ç</a> ‚Ä¢ <a href="https://t.me/digfusion">–ù–æ–≤–æ—Å—Ç–∏</a> ‚Ä¢ <a href="https://t.me/digfeedbacks">–û—Ç–∑—ã–≤—ã</a></b>`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `sleep` }]],
            },
          }
        );
        break;
      case `addStart`:
        dataAboutUser.userAction = `sleepAddStart`;
        await bot.editMessageText(
          `<b>–¢–≤–æ–π —Å–æ–Ω, ${dataAboutUser.login} ‚ú®</b>\n\n–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ª–æ–∂–∏—à—å—Å—è —Å–ø–∞—Ç—å?${
            dataAboutUser.sleepData.length != 0 ? `\n\n<b>–°–µ–π—á–∞—Å:</b>\n<blockquote>${dataAboutUser.sleepData[0].join(`:`)}</blockquote>` : ``
          }`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `sleep` }]],
            },
          }
        );
        break;
      case `addFinish`:
        dataAboutUser.userAction = `sleepAddFinish`;
        await bot.editMessageText(
          `<b>–¢–≤–æ–π —Å–æ–Ω, ${dataAboutUser.login} ‚ú®</b>\n\n–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è?${
            dataAboutUser.sleepData.length == 2 ? `\n\n<b>–°–µ–π—á–∞—Å:</b>\n<blockquote>${dataAboutUser.sleepData[1].join(`:`)}</blockquote>` : ``
          }`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `sleepAdd` }]],
            },
          }
        );
        break;
    }
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function streak(chatId, type = `show`) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  let selected;

  if (dataAboutUser.streakData.length) {
    selected = dataAboutUser.streakData[dataAboutUser.supportiveCount - 1];
  }

  try {
    switch (type) {
      case `show`:
        dataAboutUser.userAction = `streak`;
        await bot.editMessageText(
          `<b>–¢–≤–æ–∏ —Å–µ—Ä–∏–∏, ${dataAboutUser.login} üî•</b>\n\n${
            dataAboutUser.streakData.length != 0
              ? `${selected.title}\n<blockquote>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>${selected.duration}</b></blockquote>`
              : `<blockquote><b>–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–∞, —Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º</b></blockquote><i> ~ –ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É üáµüáπ</i>`
          }`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `${dataAboutUser.streakData.length > 1 ? `üîº` : ``}`, callback_data: `streakBack` },
                  {
                    text: `${dataAboutUser.streakData.length != 0 ? `${dataAboutUser.supportiveCount}/${dataAboutUser.streakData.length}` : ``}`,
                    callback_data: `streakSelect`,
                  },
                  { text: `${dataAboutUser.streakData.length > 1 ? `üîΩ` : ``}`, callback_data: `streakNext` },
                ],
                [{ text: `–î–æ–±–∞–≤–∏—Ç—å ‚úçÔ∏è`, callback_data: `streakAdd` }],
                [
                  { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                  { text: `${dataAboutUser.streakData.length != 0 ? `–û—Ç–º–µ—Ç–∏—Ç—å${selected.marker ? ` ‚úÖ` : ``}` : ``}`, callback_data: `streakMark` },
                ],
              ],
            },
          }
        );
        break;
      case `add`:
        dataAboutUser.userAction = `streakAdding`;
        await bot.editMessageText(`<b>${dataAboutUser.streakData.length + 1}. –ù–æ–≤–∞—è —Å–µ—Ä–∏—è üî•</b>\n\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏`, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.botMessageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `streak` }]],
          },
        });
        break;
      case `select`:
        dataAboutUser.userAction = `streakEditing`;
        await bot.editMessageText(
          `<b>${dataAboutUser.supportiveCount}. –°–µ—Ä–∏—è üî•</b>\n\n${selected.title}\n<blockquote>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>${selected.duration}</b></blockquote>\n\n–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Ä–∏–∏, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å`,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [{ text: `–û–±–Ω—É–ª–∏—Ç—å üòï`, callback_data: `streakZero` }],
                [
                  { text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `streak` },
                  { text: `–£–¥–∞–ª–∏—Ç—å üóë`, callback_data: `streakDelete` },
                ],
              ],
            },
          }
        );
        break;
    }
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function menu(chatId, type = `edit`, navigate = false) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  dataAboutUser.userAction = `regular`;

  const currentTime = new Date().getHours();
  let helloText = `–î–æ–±—Ä—ã–π –¥–µ–Ω—å`;

  if (currentTime >= 5 && currentTime <= 8) {
    helloText = `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ`;
  } else if (currentTime >= 9 && currentTime <= 16) {
    helloText = `–î–æ–±—Ä—ã–π –¥–µ–Ω—å`;
  } else if (currentTime >= 17 && currentTime <= 22) {
    helloText = `–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä`;
  } else if (currentTime >= 23 || currentTime <= 4) {
    helloText = `–î–æ–±—Ä–æ–π –Ω–æ—á–∏`;
  }

  try {
    switch (type) {
      case `edit`:
        await bot.editMessageText(
          `<b>${helloText}, ${dataAboutUser.login}! üíØ</b>\n\n<b>–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?</b>\n\n${
            navigate
              ? `<blockquote><b>–¶–µ–ª–∏ üèî</b> ‚Äî —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –Ω–∞ –±—É–¥—É—â–µ–µ\n\n<b>–ó–∞–º–µ—Ç–∫–∏ ‚ö°</b> ‚Äî —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º—ã—Å–ª–µ–π –∏ –∏–¥–µ–π\n\n<b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è</b> ‚Äî —Ç–≤–æ–∏ –±–æ–ª—å—à–∏–µ –ø–æ–±–µ–¥—ã\n\n<b>–°–æ–Ω ‚ú®</b> ‚Äî —Ä–µ–∂–∏–º –∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–Ω–∞\n\n<b>–°–µ—Ä–∏–∏ üî•</b> ‚Äî —Ä–∞–∑–¥–µ–ª —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã</blockquote>\n\n<a href="https://t.me/${botName}/?start=hideNav"><b>–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚áß</b></a>`
              : `<a href="https://t.me/${botName}/?start=showNav"><b>–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</b></a>`
          }`,
          {
            parse_mode: `html`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `–¶–µ–ª–∏ üèî`, callback_data: `goal` },
                  { text: `–ó–∞–º–µ—Ç–∫–∏ ‚ö°`, callback_data: `note` },
                ],
                [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `feat` }],
                [
                  { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
                  { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streak` },
                ],
              ],
            },
          }
        );
        break;
      case `firstMeeting`:
        await bot.editMessageText(
          `<b>–ü—Ä–∏–≤–µ—Ç, ${dataAboutUser.login}! ü§ò</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–¢–µ–±—è –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –º–µ–Ω—é <i><b>neverfinished!</b></i>\n\n<a href="https://t.me/${botName}/?start=showNav"><b>–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</b></a>`,
          {
            parse_mode: `html`,
            chat_id: chatId,
            message_id: dataAboutUser.botMessageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `–¶–µ–ª–∏ üèî`, callback_data: `goal` },
                  { text: `–ó–∞–º–µ—Ç–∫–∏ ‚ö°`, callback_data: `note` },
                ],
                [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `achiv` }],
                [
                  { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
                  { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streak` },
                ],
              ],
            },
          }
        );
        break;
    }
  } catch (error) {
    errorData(chatId, dataAboutUser.login, `${String(error)}`);
  }
}

async function StartAll() {
  if (fs.readFileSync("DB.json") != "[]" && fs.readFileSync("DB.json") != "") {
    let dataFromDB = JSON.parse(fs.readFileSync("DB.json"));
    usersData = dataFromDB.usersData || null;
  }

  bot.on(`text`, async (message) => {
    let chatId = message.chat.id;
    let text = message.text.replace("<", "‚Äπ").replace(">", "‚Ä∫");

    try {
      const userInfo = usersData.find((obj) => obj.chatId == chatId);

      if (userInfo) {
        Object.assign(userInfo, {
          chatId: chatId,
          login: userInfo.login ?? message.from.first_name,
          botMessageId: userInfo.botMessageId ?? null,
          userAction: userInfo.userAction ?? `regular`,
          supportiveCount: userInfo.supportiveCount ?? 1,
          goalData: userInfo.goalData ?? [],
          noteData: userInfo.noteData ?? [],
          featData: userInfo.achivData ?? [],
          sleepData: userInfo.sleepData ?? [],
          streakData: userInfo.streakData ?? [],
        });
      } else {
        usersData.push({
          chatId: chatId,
          login: message.from.first_name,
          botMessageId: null,
          userAction: `regular`,
          supportiveCount: 1,
          goalData: [],
          noteData: [],
          featData: [],
          sleepData: [],
          streakData: [],
        });
      }

      bot.deleteMessage(chatId, message.message_id);

      const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

      if (dataAboutUser) {
        switch (text) {
          case `/start`:
            intro(chatId, `send`);
            bot.deleteMessage(chatId, dataAboutUser.botMessageId);
            break;
          case `/start showNav`:
            menu(chatId, `edit`, true);
            break;
          case `/start hideNav`:
            menu(chatId);
            break;
        }
      }

      if (text && Array.from(text)[0] != "/") {
        switch (dataAboutUser.userAction) {
          case `getName`:
            dataAboutUser.login = text.slice(0, 20);
            menu(chatId, `firstMeeting`);
            break;

          case `goalAdding`:
            dataAboutUser.goalData.unshift({ title: text, marker: false });
            goal(chatId);
            break;
          case `goalEditing`:
            dataAboutUser.goalData[dataAboutUser.supportiveCount - 1].title = text;
            goal(chatId);
            break;

          case `noteAdding`:
            dataAboutUser.noteData.unshift({ title: text, marker: false });
            note(chatId);
            break;
          case `noteEditing`:
            dataAboutUser.noteData[dataAboutUser.supportiveCount - 1].title = text;
            note(chatId);
            break;

          case `featAdding`:
            dataAboutUser.featData.unshift({ title: text, marker: false });
            feat(chatId);
            break;
          case `featEditing`:
            dataAboutUser.featData[dataAboutUser.supportiveCount - 1].title = text;
            feat(chatId);
            break;

          case `streakAdding`:
            dataAboutUser.streakData.unshift({ title: text, marker: false, duration: 0 });
            streak(chatId);
            break;
          case `streakEditing`:
            dataAboutUser.streakData[dataAboutUser.supportiveCount - 1].title = text;
            streak(chatId);
            break;

          case `sleepAddStart`:
            if (/^([01]?\d|2[0-3])[: ]([0-5]\d)$/.test(text)) {
              dataAboutUser.sleepData[0] = [text.split(/[: ]/)[0], text.split(/[: ]/)[1]];
              sleep(chatId, `addFinish`);
            }
            break;
          case `sleepAddFinish`:
            if (/^([01]?\d|2[0-3])[: ]([0-5]\d)$/.test(text)) {
              dataAboutUser.sleepData[1] = [text.split(/[: ]/)[0], text.split(/[: ]/)[1]];
              sleep(chatId);
            }
            break;
        }
      }

      textData(chatId, message.from.username, dataAboutUser.login, text);
    } catch (error) {
      errorData(chatId, dataAboutUser.login, `${String(error)}`);
    }
  });

  bot.on(`callback_query`, async (query) => {
    let chatId = query.message.chat.id;
    let data = query.data;

    const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

    try {
      switch (data) {
        case `menu`:
          menu(chatId);
          dataAboutUser.supportiveCount = 1;
          break;
        case `introNext`:
          intro(chatId, `greeting`);
          break;
        case `introBack`:
          intro(chatId);
          break;
        case `keepName`:
          menu(chatId, `firstMeeting`);
          break;

        case `goal`:
          goal(chatId);
          break;
        case `note`:
          note(chatId);
          break;
        case `feat`:
          feat(chatId);
          break;
        case `sleep`:
          sleep(chatId);
          break;
        case `streak`:
          streak(chatId);
          break;

        case `goalAdd`:
          goal(chatId, `add`);
          break;
        case `goalSelect`:
          goal(chatId, `select`);
          break;
        case `goalNext`:
          `${
            dataAboutUser.supportiveCount < dataAboutUser.goalData.length ? (dataAboutUser.supportiveCount += 1) : (dataAboutUser.supportiveCount = 1)
          }`;
          goal(chatId);
          break;
        case `goalBack`:
          `${
            dataAboutUser.supportiveCount > 1 ? (dataAboutUser.supportiveCount -= 1) : (dataAboutUser.supportiveCount = dataAboutUser.goalData.length)
          }`;
          goal(chatId);
          break;
        case `goalMark`:
          dataAboutUser.goalData[dataAboutUser.supportiveCount - 1].marker = 1 - dataAboutUser.goalData[dataAboutUser.supportiveCount - 1].marker;
          goal(chatId);
          break;
        case `goalDelete`:
          dataAboutUser.goalData.splice(dataAboutUser.supportiveCount - 1, 1);
          `${dataAboutUser.supportiveCount > 1 ? (dataAboutUser.supportiveCount -= 1) : ``}`;
          goal(chatId);
          break;

        case `noteAdd`:
          note(chatId, `add`);
          break;
        case `noteSelect`:
          note(chatId, `select`);
          break;
        case `noteNext`:
          `${
            dataAboutUser.supportiveCount < dataAboutUser.noteData.length ? (dataAboutUser.supportiveCount += 1) : (dataAboutUser.supportiveCount = 1)
          }`;
          note(chatId);
          break;
        case `noteBack`:
          `${
            dataAboutUser.supportiveCount > 1 ? (dataAboutUser.supportiveCount -= 1) : (dataAboutUser.supportiveCount = dataAboutUser.noteData.length)
          }`;
          note(chatId);
          break;
        case `noteMark`:
          dataAboutUser.noteData[dataAboutUser.supportiveCount - 1].marker = 1 - dataAboutUser.noteData[dataAboutUser.supportiveCount - 1].marker;
          note(chatId);
          break;
        case `noteDelete`:
          dataAboutUser.noteData.splice(dataAboutUser.supportiveCount - 1, 1);
          `${dataAboutUser.supportiveCount > 1 ? (dataAboutUser.supportiveCount -= 1) : ``}`;
          note(chatId);
          break;

        case `featAdd`:
          feat(chatId, `add`);
          break;
        case `featSelect`:
          feat(chatId, `select`);
          break;
        case `featNext`:
          `${
            dataAboutUser.supportiveCount < dataAboutUser.featData.length ? (dataAboutUser.supportiveCount += 1) : (dataAboutUser.supportiveCount = 1)
          }`;
          feat(chatId);
          break;
        case `featBack`:
          `${
            dataAboutUser.supportiveCount > 1 ? (dataAboutUser.supportiveCount -= 1) : (dataAboutUser.supportiveCount = dataAboutUser.featData.length)
          }`;
          feat(chatId);
          break;
        case `featMark`:
          dataAboutUser.featData[dataAboutUser.supportiveCount - 1].marker = 1 - dataAboutUser.featData[dataAboutUser.supportiveCount - 1].marker;
          feat(chatId);
          break;
        case `featDelete`:
          dataAboutUser.featData.splice(dataAboutUser.supportiveCount - 1, 1);
          `${dataAboutUser.supportiveCount > 1 ? (dataAboutUser.supportiveCount -= 1) : ``}`;
          feat(chatId);
          break;

        case `streakAdd`:
          streak(chatId, `add`);
          break;
        case `streakSelect`:
          streak(chatId, `select`);
          break;
        case `streakNext`:
          `${
            dataAboutUser.supportiveCount < dataAboutUser.streakData.length
              ? (dataAboutUser.supportiveCount += 1)
              : (dataAboutUser.supportiveCount = 1)
          }`;
          streak(chatId);
          break;
        case `streakBack`:
          `${
            dataAboutUser.supportiveCount > 1
              ? (dataAboutUser.supportiveCount -= 1)
              : (dataAboutUser.supportiveCount = dataAboutUser.streakData.length)
          }`;
          streak(chatId);
          break;
        case `streakMark`:
          dataAboutUser.streakData[dataAboutUser.supportiveCount - 1].marker = true;
          dataAboutUser.streakData[dataAboutUser.supportiveCount - 1].duration += 1;
          streak(chatId);
          break;
        case `streakDelete`:
          dataAboutUser.streakData.splice(dataAboutUser.supportiveCount - 1, 1);
          `${dataAboutUser.supportiveCount > 1 ? (dataAboutUser.supportiveCount -= 1) : ``}`;
          streak(chatId);
          break;
        case `streakZero`:
          dataAboutUser.streakData[dataAboutUser.supportiveCount - 1].marker = false;
          dataAboutUser.streakData[dataAboutUser.supportiveCount - 1].duration = 0;
          streak(chatId, `select`);
          break;

        case `sleepTips`:
          sleep(chatId, `tips`);
          break;
        case `digfusion`:
          sleep(chatId, `digfusion`);
          break;

        case `sleepAdd`:
          sleep(chatId, `addStart`);
          break;
      }

      buttonData(chatId, query.message.chat.username, dataAboutUser.login, data);
    } catch (error) {
      errorData(chatId, dataAboutUser.login, `${String(error)}`);
    }
  });

  // cron.schedule(`0 0 * * *`, function () {
  //   try {
  //     databaseBackup(usersData);
  //   } catch (error) {}
  // });

  cron.schedule(`*/1 * * * *`, function () {
    try {
      fs.writeFileSync("DB.json", JSON.stringify({ usersData }, null, 2));
    } catch (error) {}
  });
}

StartAll();
