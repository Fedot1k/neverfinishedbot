import TelegramBot from "node-telegram-bot-api";

const TOKEN = `7279660476:AAGHOLKPGLzGTvMXff4mAYBZ8XnLrQV2e8w`;
const bot = new TelegramBot(TOKEN, { polling: true });
const BotName = `neverfinishedbot`;

let usersData = [];

bot.setMyCommands([
  {
    command: `/restart`,
    description: `–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üîÑÔ∏è`,
  },
]);

let navtext = `<b>"–¶–µ–ª–∏ üèî"</b> - —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –Ω–∞ –±—É–¥—É—â–µ–µ.\n\n<b>"–ó–∞–º–µ—Ç–∫–∏ ‚ö°"</b> - —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º—ã—Å–ª–µ–π –∏ –∏–¥–µ–π.\n\n<b>"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è"</b> - —Ç–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –±–æ–ª—å—à–∏–µ –ø–æ–±–µ–¥—ã.\n\n<b>"–°–æ–Ω ‚ú®"</b> - –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞ –∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.\n\n<b>"–°–µ—Ä–∏–∏ üî•"</b> - —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.`;

let first_text = `<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> –≤ –º–∏—Ä —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å <b><i>neverfinished!</i></b>\n\n<b>‚Ä¢  –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üíØ</b>\n–í–µ–¥–∏ —É—á–µ—Ç —Å–≤–æ–∏—Ö –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã—Ö <b><i>—Ü–µ–ª–µ–π</i></b> –∏ –≤–µ–ª–∏–∫–∏—Ö <b><i>–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!</i></b>\n\n<b>‚Ä¢  –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ ‚ö°</b>\n–ó–∞–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–∏ <b><i>–º—ã—Å–ª–∏ –∏ –∏–¥–µ–∏</i></b>, –∫–æ—Ç–æ—Ä—ã–µ <b><i>–Ω–µ–ª—å–∑—è –∑–∞–±—ã—Ç—å!</i></b>\n\n<b>‚Ä¢  –û—Ç—á–µ—Ç –ø–æ –ª–∏—á–Ω—ã–º —Ä–µ–∫–æ—Ä–¥–∞–º üî•</b>\n–ü—Ä–æ–∫–∞—á–∏–≤–∞–π <b><i>–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É</i></b>, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–±–µ–¥–Ω—ã–µ —Å–µ—Ä–∏–∏ –Ω–∞–¥ <b><i>—Å–∞–º–∏–º —Å–æ–±–æ–π!</i></b>\n\n<b>‚Ä¢  –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–Ω–∞ ‚ú®</b>\n–£–ª—É—á—à–∞–π —Å–≤–æ–π <b><i>—Ä–µ–∂–∏–º —Å–Ω–∞</i></b> –∏ –ø—Ä–æ–≤–æ–¥–∏ –¥–µ–Ω—å <b><i>—ç–Ω–µ—Ä–≥–∏—á–Ω–µ–µ!</i></b>\n\n<b>üí™ –ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ —Å <i>neverfinished!</i></b>`;

let second_text = `<b>–ö–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º? ü§î</b>\n\n<i><b>*neverfinished</b> –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü§´</i>`;

let sleep_tips_text = `<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ üí§</b>\n\n–ü–µ—Ä–µ–¥ —Å–Ω–æ–º:<blockquote><b>‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω üëÄ</b>\n–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ —Å–∏–Ω–µ–≥–æ —Å–≤–µ—Ç–∞ –Ω–∞—Ä—É—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Ä–∏—Ç–º–æ–≤ —Å–Ω–∞\n\n<b>‚Ä¢ –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å üìö</b>\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ª–∏—à–Ω–∏—Ö –º—ã—Å–ª–µ–π –∏ –ª—É—á—à–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å\n\n<b>‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ç–µ–º–Ω–æ—Ç—É üåô</b>\n–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —Ö–æ—Ä–æ—à–µ–º—É —Å–Ω—É</blockquote>\n\n–ü–æ—Å–ª–µ —Å–Ω–∞:<blockquote><b>‚Ä¢ –í—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã üíß</b>\n–≠—Ç–æ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ —Ç–µ–ª–∞\n\n<b>‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–æ—Ü. —Å–µ—Ç–µ–π üíª</b>\n–≠—Ç–æ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –≤–∞—à —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç–º\n\n<b>‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –∑–∞—Ä—è–¥–∫—É üßò</b>\n–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–º –∏ –¥–µ–ª–∞–µ—Ç –≤–∞—Å —ç–Ω–µ—Ä–≥–∏—á–Ω–µ–µ</blockquote>`;

async function first(chatId, stage = 1) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (stage) {
      case 1:
        await bot
          .sendMessage(chatId, first_text, {
            parse_mode: `HTML`,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[{ text: `–î–∞–ª–µ–µ‚û°Ô∏è`, callback_data: `next` }]],
            },
          })
          .then((message) => {
            dataAboutUser.messageId = message.message_id;
            dataAboutUser.action = `intro`;
          });
        break;
      case 2:
        await bot.editMessageText(first_text, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `–î–∞–ª–µ–µ‚û°Ô∏è`, callback_data: `next` }]],
          },
        });
        dataAboutUser.action = `intro`;
        break;
      case 3:
        await bot.editMessageText(second_text, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `–û—Å—Ç–∞–≤–∏—Ç—å ${dataAboutUser.TelegramUsername} ‚úÖ`,
                  callback_data: `leavename`,
                },
              ],
              [{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `back` }],
            ],
          },
        });
        dataAboutUser.action = `set_login`;
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function menu(chatId, stage = 1, navActive = false) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  const current_time = new Date().getHours();
  let hello_text = `–î–æ–±—Ä—ã–π –¥–µ–Ω—å`;

  if (current_time >= 5 && current_time <= 10) {
    hello_text = `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ`;
  } else if (current_time >= 11 && current_time <= 16) {
    hello_text = `–î–æ–±—Ä—ã–π –¥–µ–Ω—å`;
  } else if (current_time >= 17 && current_time <= 22) {
    hello_text = `–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä`;
  } else if (current_time > 22 || current_time < 5) {
    hello_text = `–î–æ–±—Ä–æ–π –Ω–æ—á–∏`;
  }

  try {
    switch (stage) {
      case 1:
        await bot.editMessageText(`<b>${hello_text}, ${dataAboutUser.login}! üíØ</b>\n\n<b>–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?</b>\n\n${navActive ? `<blockquote>${navtext}</blockquote>\n\n<a href="https://t.me/${BotName}/?start=hideNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚áß</a>` : `<a href="https://t.me/${BotName}/?start=showNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</a>`}`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `–¶–µ–ª–∏ üèî`, callback_data: `goals` },
                { text: `–ó–∞–º–µ—Ç–∫–∏ ‚ö°`, callback_data: `notes` },
              ],
              [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `achivs` }],
              [
                { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
                { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streaks` },
              ],
            ],
          },
        });
        dataAboutUser.action = `menu`;
        break;
      case 3:
        if (dataAboutUser.loginOver) {
          await bot
            .sendMessage(chatId, `<b>${hello_text}, ${dataAboutUser.login}! üíØ</b>\n\n<b>–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?</b>\n\n<a href="https://t.me/${BotName}/?start=showNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</a>`, {
              parse_mode: `HTML`,
              disable_web_page_preview: true,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: `–¶–µ–ª–∏ üèî`, callback_data: `goals` },
                    { text: `–ó–∞–º–µ—Ç–∫–∏ ‚ö°`, callback_data: `notes` },
                  ],
                  [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `achivs` }],
                  [
                    { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
                    { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streaks` },
                  ],
                ],
              },
            })
            .then((message) => {
              dataAboutUser.messageId = message.message_id;
              dataAboutUser.action = `menu`;
            });
        }
        break;
      case 4:
        await bot.editMessageText(`<b>–ü—Ä–∏–≤–µ—Ç, ${dataAboutUser.login}! ü§ò</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–¢–µ–±—è –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –º–µ–Ω—é <i><b>neverfinished!</b></i>\n\n<a href="https://t.me/${BotName}/?start=showNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</a>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `–¶–µ–ª–∏ üèî`, callback_data: `goals` },
                { text: `–ó–∞–º–µ—Ç–∫–∏ ‚ö°`, callback_data: `notes` },
              ],
              [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `achivs` }],
              [
                { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
                { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streaks` },
              ],
            ],
          },
        });
        dataAboutUser.action = `menu`;
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function goals(chatId, stage = 1) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
  let show_text = `\n`;

  for (let i = 1; i <= dataAboutUser.goals_data.goals_title_list.length; i++) {
    show_text += `${dataAboutUser.goals_data.goals_num == i ? `\n‚Ä¢ ${i}. ${dataAboutUser.goals_data.goals_title_list[i - 1]} ‚Ä¢\n<blockquote>${dataAboutUser.goals_data.goals_text_list[i - 1]}</blockquote>` : `\n${i}. ${dataAboutUser.goals_data.goals_title_list[i - 1]}`}`;
  }

  show_text += `\n filler`;

  try {
    switch (stage) {
      case 1:
        await bot.editMessageText(`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏, ${dataAboutUser.login} üèî</b>${show_text}`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `üîº`, callback_data: `back_page_goal` },
                { text: `‚Ä¢ ‚Ññ  ${dataAboutUser.goals_data.goals_num}‚Ä¢`, callback_data: `cur_page` },
                { text: `üîΩ`, callback_data: `next_page_goal` },
              ],
              [
                { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                { text: `–î–æ–±–∞–≤–∏—Ç—å`, callback_data: `add_goal` },
              ],
            ],
          },
        });
        dataAboutUser.action = `goals`;
        break;
      case 2:
        await bot.editMessageText(`–¶–µ–ª—å<b> ‚Ä¢‚Ññ ${dataAboutUser.goals_data.goals_num}‚Ä¢ üèî</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `–ò–∑–º–µ–Ω–∏—Ç—å`, callback_data: `edit_goal` },
                { text: `–£–¥–∞–ª–∏—Ç—å`, callback_data: `delete_goal` },
              ],
              [{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_goals` }],
            ],
          },
        });
        dataAboutUser.action = `about_goal`;
        break;
      case 3:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ü–µ–ª–∏</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_goals` }]],
          },
        });
        dataAboutUser.action = `add_goal_title`;
        break;
      case 4:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Ü–µ–ª–∏</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_goals` }]],
          },
        });
        dataAboutUser.action = `add_goal_text`;
        break;
      case 5:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ü–µ–ª–∏</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_cur_goal` }]],
          },
        });
        dataAboutUser.action = `edit_goal_title`;
        break;
      case 6:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Ü–µ–ª–∏</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_cur_goal` }]],
          },
        });
        dataAboutUser.action = `edit_goal_text`;
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function notes(chatId, stage = 1) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (stage) {
      case 1:
        await bot.editMessageText(`<b>–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏, ${dataAboutUser.login} ‚ö°</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `üîº`, callback_data: `back_page` },
                { text: `1 —Å—Ç—Ä`, callback_data: `cur_page` },
                { text: `üîΩ`, callback_data: `next_page` },
              ],
              [
                { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                { text: `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úçÔ∏è`, callback_data: `edit_notes` },
              ],
            ],
          },
        });
        dataAboutUser.action = `notes`;
        break;
      case 2:
        await bot.editMessageText(`<b>–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏, ${dataAboutUser.login} ‚ö°</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `üîº`, callback_data: `back_page` },
                { text: `1 —Å—Ç—Ä`, callback_data: `cur_page` },
                { text: `üîΩ`, callback_data: `next_page` },
              ],
              [
                { text: `–î–æ–±–∞–≤–∏—Ç—å`, callback_data: `add_note` },
                { text: `–£–¥–∞–ª–∏—Ç—å`, callback_data: `delete_note` },
                { text: `–ò–∑–º–µ–Ω–∏—Ç—å`, callback_data: `change_note` },
              ],
              [{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_notes` }],
            ],
          },
        });
        dataAboutUser.action = `notes`;
        break;
      case 3:
        await bot.editMessageText(`<b>–ó–∞–ø–∏—à–∏ —Å–≤–æ—é –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_edit_notes` }]],
          },
        });
        dataAboutUser.action = `notes_add`;
        break;
      case 4:
        await bot.editMessageText(`<b>–ö–∞–∫—É—é –∑–∞–º–µ—Ç–∫—É —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_edit_notes` }]],
          },
        });
        dataAboutUser.action = `notes_delete`;
        break;
      case 5:
        await bot.editMessageText(`<b>–ö–∞–∫—É—é –∑–∞–º–µ—Ç–∫—É —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_edit_notes` }]],
          },
        });
        dataAboutUser.action = `notes_change`;
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function achivs(chatId, stage = 1) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (stage) {
      case 1:
        await bot.editMessageText(`<b>–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, ${dataAboutUser.login} üéñÔ∏è</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `üîº`, callback_data: `back_page` },
                { text: `1 —Å—Ç—Ä`, callback_data: `cur_page` },
                { text: `üîΩ`, callback_data: `next_page` },
              ],
              [
                { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                { text: `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úçÔ∏è`, callback_data: `edit_achivs` },
              ],
            ],
          },
        });
        dataAboutUser.action = `achivs`;
        break;
      case 2:
        await bot.editMessageText(`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏, ${dataAboutUser.login} üéñÔ∏è</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `üîº`, callback_data: `back_page` },
                { text: `1 —Å—Ç—Ä`, callback_data: `cur_page` },
                { text: `üîΩ`, callback_data: `next_page` },
              ],
              [
                { text: `–î–æ–±–∞–≤–∏—Ç—å`, callback_data: `add_achiv` },
                { text: `–£–¥–∞–ª–∏—Ç—å`, callback_data: `delete_achiv` },
                { text: `–ò–∑–º–µ–Ω–∏—Ç—å`, callback_data: `change_achiv` },
              ],
              [{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_achivs` }],
            ],
          },
        });
        dataAboutUser.action = `achivs`;
        break;
      case 3:
        await bot.editMessageText(`<b>–ó–∞–ø–∏—à–∏ —Å–≤–æ–µ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_edit_achivs` }]],
          },
        });
        dataAboutUser.action = `achivs_add`;
        break;
      case 4:
        await bot.editMessageText(`<b>–ö–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_edit_achivs` }]],
          },
        });
        dataAboutUser.action = `achivs_delete`;
        break;
      case 5:
        await bot.editMessageText(`<b>–ö–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_edit_achivs` }]],
          },
        });
        dataAboutUser.action = `achivs_change`;
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function sleep(chatId, stage = 1, time = null) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (stage) {
      case 1:
        await bot.editMessageText(`<b>–¢–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞, ${dataAboutUser.login} ‚ú®</b>\n\n–í—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è: <b>${dataAboutUser.sleep_data.sleep_at}</b>\n–í—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞: <b>${dataAboutUser.sleep_data.wake_at}</b>\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∞: <b>${dataAboutUser.sleep_data.sleep_duration} üò¥</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [{ text: `–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ ‚åö`, callback_data: `edit_sleep` }],
              [
                { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                { text: `–°–æ–≤–µ—Ç—ã ‚ÅâÔ∏è`, callback_data: `sleep_tips` },
              ],
            ],
          },
        });
        dataAboutUser.action = `sleep`;
        break;
      case 2:
        await bot.editMessageText(`<b>–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –∏–¥–µ—à—å —Å–ø–∞—Ç—å? ü§î</b>\n\n–ü—Ä–∏–º–µ—Ä: <code>22:30</code>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_sleep` }]],
          },
        });
        dataAboutUser.action = `sleep_sleep_at`;
        break;
      case 3:
        await bot.editMessageText(`<b>–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è? ü§î</b>\n\n–ü—Ä–∏–º–µ—Ä: <code>6:30</code>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_sleep` }]],
          },
        });
        dataAboutUser.action = `sleep_wake_at`;
        break;
      case 4:
        await bot.editMessageText(sleep_tips_text, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `back_to_sleep` }]],
          },
        });
        dataAboutUser.action = `sleep`;
        break;
      case 5:
        if (!/[a-z]/i.test(time) && time.includes(":")) {
          time = time.replace(/\s/g, "");
          let parse = time.split(":");

          if (parse[1].length === 2 && Number(parse[0]) >= 0 && Number(parse[0]) <= 23 && Number(parse[1]) >= 0 && Number(parse[1]) <= 59) {
            dataAboutUser.sleep_data.sleep_at = time;
            sleep(chatId, 3);
          }
        }
        break;
      case 6:
        if (!/[a-z]/i.test(time) && time.includes(":")) {
          time = time.replace(/\s/g, "");
          let parse = time.split(":");

          if (parse[1].length === 2 && Number(parse[0]) >= 0 && Number(parse[0]) <= 23 && Number(parse[1]) >= 0 && Number(parse[1]) <= 59) {
            dataAboutUser.sleep_data.wake_at = time;

            let h1 = Number(dataAboutUser.sleep_data.sleep_at.split(":")[0]);
            let m1 = Number(dataAboutUser.sleep_data.sleep_at.split(":")[1]);
            let h2 = Number(dataAboutUser.sleep_data.wake_at.split(":")[0]);
            let m2 = Number(dataAboutUser.sleep_data.wake_at.split(":")[1]);

            let dur = 0;

            if (h1 > h2) {
              dur = 1440 - h1 * 60 - m1 + (h2 * 60 + m2);
            } else if (h1 < h2) {
              dur = h2 * 60 + m2 - (h1 * 60 + m1);
            } else if (h1 == h2 && m1 < m2) {
              dur = m2 - m1;
            } else if (h1 == h2 && m1 > m2) {
              dur = 1440 - h1 * 60 - m1 + (h2 * 60 + m2);
            }

            dataAboutUser.sleep_data.sleep_duration = `${(dur - (dur % 60)) / 60}:${dur % 60 < 10 ? `0` : ``}${dur % 60}`;

            sleep(chatId);
          }
        }
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function streaks(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–¢–≤–æ–∏ –ø–æ–±–µ–¥–Ω—ã–µ —Å–µ—Ä–∏–∏, ${dataAboutUser.login} üî•</b>\n\n`, {
      parse_mode: `html`,
      chat_id: chatId,
      message_id: dataAboutUser.messageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [{ text: `+ –î–æ–±–∞–≤–∏—Ç—å +`, callback_data: `add_goal` }],
          [{ text: `- –£–¥–∞–ª–∏—Ç—å -`, callback_data: `delete_goal` }],
          [
            { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
            { text: `–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ`, callback_data: `done_goal` },
          ],
        ],
      },
    });
    dataAboutUser.action = `streaks`;
  } catch (error) {
    console.log(error);
  }
}

async function StartAll() {
  bot.on(`message`, async (message) => {
    let text = message.text;
    let chatId = message.chat.id;
    let usermessage = message.message_id;

    try {
      if (!usersData.find((obj) => obj.chatId == chatId)) {
        usersData.push({
          chatId: chatId,
          login: null,
          TelegramUsername: message.from.first_name,
          messageId: null,
          action: null,
          loginOver: false,

          goals_data: { goals_title_list: [], goals_text_list: [], goals_num: 1 },

          notes_data: { notes_title_list: [], notes_text_list: [] },

          achivs_data: { achivs_title_list: [], achivs_text_list: [] },

          streaks_data: { streaks_list: [], streaks_duration: [] },

          sleep_data: { sleep_duration: 0, sleep_at: `-`, wake_at: `-` },
        });
      }

      const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

      switch (text) {
        case `/start`:
          first(chatId);
          break;
        case `/restart`:
          menu(chatId, 3);
          break;
        case `/start showNav`:
          menu(chatId, 1, true);
          break;
        case `/start hideNav`:
          menu(chatId);
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
      }

      if (dataAboutUser.action == `set_login` && Array.from(text)[0] != "/") {
        dataAboutUser.login = text;
        dataAboutUser.loginOver = true;
        menu(chatId, 4);
      } else if (dataAboutUser.action == `sleep_sleep_at`) {
        sleep(chatId, 5, text);
      } else if (dataAboutUser.action == `sleep_wake_at`) {
        sleep(chatId, 6, text);
      } else if (dataAboutUser.action == `add_goal_title`) {
        dataAboutUser.goals_data.goals_title_list.push(text);
        goals(chatId, 4);
      } else if (dataAboutUser.action == `add_goal_text`) {
        dataAboutUser.goals_data.goals_text_list.push(text);
        goals(chatId);
      } else if (dataAboutUser.action == `edit_goal_title`) {
        dataAboutUser.goals_data.goals_title_list[dataAboutUser.goals_num] = text;
        goals(chatId, 6);
      } else if (dataAboutUser.action == `edit_goal_text`) {
        dataAboutUser.goals_data.goals_text_list[dataAboutUser.goals_num] = text;
        goals(chatId, 2);
      }

      bot.deleteMessage(chatId, usermessage);
    } catch (error) {}
  });

  bot.on(`callback_query`, async (query) => {
    let chatId = query.message.chat.id;
    let data = query.data;

    const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

    try {
      switch (data) {
        ////////////////////////////////

        case `menu`:
          menu(chatId);
          break;
        case `goals`:
          goals(chatId);
          break;
        case `notes`:
          notes(chatId);
          break;
        case `achivs`:
          achivs(chatId);
          break;
        case `sleep`:
          sleep(chatId);
          break;
        case `streaks`:
          streaks(chatId);
          break;
        case `next`:
          first(chatId, 3);
          break;
        case `back`:
          first(chatId, 2);
          break;
        case `leavename`:
          dataAboutUser.login = dataAboutUser.TelegramUsername;
          dataAboutUser.loginOver = true;
          menu(chatId, 4);
          break;

        ////////////////////////////////

        case `back_to_goals`:
          goals(chatId, 1);
          break;
        case `cur_page`:
          `${dataAboutUser.goals_data.goals_title_list.length != 0 ? goals(chatId, 2) : 0}`;
          break;
        case `add_goal`:
          goals(chatId, 3);
          break;
        case `delete_goal`:
          dataAboutUser.goals_data.goals_title_list.splice(dataAboutUser.goals_data.goals_num - 1, 1);
          dataAboutUser.goals_data.goals_text_list.splice(dataAboutUser.goals_data.goals_num - 1, 1);
          goals(chatId, 1);
          break;
        case `edit_goal`:
          goals(chatId, 5);
          break;
        case `next_page_goal`:
          dataAboutUser.goals_data.goals_num += 1;
          goals(chatId, 1);
        case `back_page_goal`:
          dataAboutUser.goals_data.goals_num -= 1;
          goals(chatId, 1);
          break;
        case `back_to_cur_goal`:
          goals(chatId, 2);
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;

        ////////////////////////////////

        case `edit_sleep`:
          sleep(chatId, 2);
          break;
        case `back_to_sleep`:
          sleep(chatId, 1);
          break;
        case `sleep_tips`:
          sleep(chatId, 4);
          break;
        case ``:
          break;
        case ``:
          break;

        ////////////////////////////////

        case `edit_notes`:
          notes(chatId, 2);
          break;
        case `back_to_notes`:
          notes(chatId, 1);
          break;
        case `back_to_edit_notes`:
          notes(chatId, 2);
          break;
        case `add_note`:
          notes(chatId, 3);
          break;
        case `delete_note`:
          notes(chatId, 4);
          break;
        case `change_note`:
          notes(chatId, 5);
          break;
        case ``:
          break;
        case ``:
          break;

        ////////////////////////////////

        case `edit_achivs`:
          achivs(chatId, 2);
          break;
        case `back_to_achivs`:
          achivs(chatId, 1);
          break;
        case `back_to_edit_achivs`:
          achivs(chatId, 2);
          break;
        case `add_achiv`:
          achivs(chatId, 3);
          break;
        case `delete_achiv`:
          achivs(chatId, 4);
          break;
        case `change_achiv`:
          achivs(chatId, 5);
          break;
        case ``:
          break;
        case ``:
          break;
      }
    } catch (error) {}
  });
}

StartAll();
