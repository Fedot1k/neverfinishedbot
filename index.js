import TelegramBot from "node-telegram-bot-api";



const TOKEN = "7279660476:AAGHOLKPGLzGTvMXff4mAYBZ8XnLrQV2e8w";
const bot = new TelegramBot(TOKEN, { polling: true });

let logged = false





async function first(chatId){
	try {
		if (!logged) {
			await bot.sendMessage(
				chatId,
				"<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> –≤ –º–∏—Ä —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —Å <b><i>neverfinished!</i></b>\n\n<b>‚Ä¢  –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üèÜ</b>\n–í–µ–¥–∏ —É—á–µ—Ç —Å–≤–æ–∏—Ö –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã—Ö <b><i>—Ü–µ–ª–µ–π</i></b> –∏ –≤–µ–ª–∏–∫–∏—Ö <b><i>–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!</i></b>\n\n<b>‚Ä¢  –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏ –ø—Ä–∞–≤–∏–ª –Ω–∞ –¥–µ–Ω—å ü´°</b>\n–í—ã–ø–æ–ª–Ω—è–π —Å–≤–æ–∏ <b><i>–∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å</i></b>, –Ω–µ –∑–∞–±—ã–≤–∞—è –ø—Ä–æ <b><i>—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã!</i></b>\n\n<b>‚Ä¢  –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–Ω–∞ üåô</b>\n–£–ª—É—á—à–∞–π —Å–≤–æ–π <b><i>—Ä–µ–∂–∏–º —Å–Ω–∞</i></b> –∏ –ø—Ä–æ–≤–æ–¥–∏ –¥–µ–Ω—å <b><i>—ç–Ω–µ—Ä–≥–∏—á–Ω–µ–µ!</i></b>\n\n<b>üí™ –ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ —Å <i>neverfinished!</i></b>",
				{
					parse_mode: "HTML",
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[{ text: "–î–∞–ª–µ–µ‚û°Ô∏è ", callback_data: "next" }],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
	}
}





async function menuNav(chatId, messageId){
	try {
		await bot.editMessageText(
			`<b>–ü—Ä–∏–≤–µ—Ç, –ß–µ–º–ø–∏–æ–Ω üíØ</b>\n\n<b>–ö–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—èdddddddddd?</b>\n\n<a href="https://t.me/neverfinishedbot/?start=hideNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚áß</a>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "–¶–µ–ª–∏ üèî", callback_data: "goal" },
							{ text: "–ó–∞–¥–∞—á–∏ ‚ö°", callback_data: "todo" },
						],
						[
							{ text: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è", callback_data: "achievement" },
						],
						[
							{ text: "–°–æ–Ω ‚ú®", callback_data: "sleep" },
							{ text: "–°–µ—Ä–∏–∏ üî•", callback_data: "streak" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}





async function menu(chatId, messageId){
	try {
		await bot.editMessageText(
			`<b>–ü—Ä–∏–≤–µ—Ç, –ß–µ–º–ø–∏–æ–Ω üíØ</b>\n\n<b>–ö–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è? </b>\n\n<a href="https://t.me/neverfinishedbot/?start=showNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</a>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "–¶–µ–ª–∏ üèî", callback_data: "goal" },
							{ text: "–ó–∞–¥–∞—á–∏ ‚ö°", callback_data: "todo" },
						],
						[
							{ text: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è", callback_data: "achievement" },
						],
						[
							{ text: "–°–æ–Ω ‚ú®", callback_data: "sleep" },
							{ text: "–°–µ—Ä–∏–∏ üî•", callback_data: "streak" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}





async function todo(chatId, messageId){
	try {
		await bot.editMessageText(
			`<b>–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "- –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É -", callback_data: "add_goal" },
						],
						[
							{ text: "- –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É -", callback_data: "delete_goal" },
						],
						[
							{ text: "- –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É -", callback_data: "add_time" },
						],
						[
							{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "menu" },
							{ text: "–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ", callback_data: "goal_done" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}





async function goal(chatId, messageId){
	try {
		await bot.editMessageText(
			`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏ ü¶æ</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "- –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å -", callback_data: "add_goal" },
						],
						[
							{ text: "- –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å -", callback_data: "delete_goal" },
						],
						[
							{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "menu" },
							{ text: "–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ", callback_data: "goal_done" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}





async function achievement(chatId, messageId){
	try {
		await bot.editMessageText(
			`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏ ü¶æ</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "- –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å -", callback_data: "add_goal" },
						],
						[
							{ text: "- –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å -", callback_data: "delete_goal" },
						],
						[
							{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "menu" },
							{ text: "–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ", callback_data: "goal_done" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}





async function sleep(chatId, messageId){
	try {
		await bot.editMessageText(
			`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏ ü¶æ</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "- –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å -", callback_data: "add_goal" },
						],
						[
							{ text: "- –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å -", callback_data: "delete_goal" },
						],
						[
							{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "menu" },
							{ text: "–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ", callback_data: "goal_done" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}





async function streak(chatId, messageId){
	try {
		await bot.editMessageText(
			`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏ ü¶æ</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "- –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å -", callback_data: "add_goal" },
						],
						[
							{ text: "- –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å -", callback_data: "delete_goal" },
						],
						[
							{ text: "‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data: "menu" },
							{ text: "–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ", callback_data: "goal_done" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}





async function StartAll() {
	try {
		bot.on("message", async (message) => {
			let text = message.text;
			let chatId = message.chat.id;
			let messageId = message.message_id;

			switch (text) {
                case "/start":
					first(chatId);
					break;
				// case "/start showNav": 
				// 	menuNav(chatId, cur_mes);
				// 	break;
				// case "/start hideNav":
				// 	menu(chatId, cur_mes);
				// 	break;
				case "/restart":
					first(chatId)
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
			}
			bot.deleteMessage(chatId, messageId);
			console.log(message);
		});

		bot.on("callback_query", async (query) => {
			let chatId = query.message.chat.id;
			let data = query.data;
			let messageId = query.message.message_id;


			switch (data) {
				case "next":
					menu(chatId, messageId);
					break;
				case "menu":
					menu(chatId, messageId);
					break;
				case "todo":
					todo(chatId, messageId);
					break;
				case "goal":
					goal(chatId, messageId);
					break;
				case "achievement":
					achievement(chatId, messageId);
					break;
				case "sleep":
					sleep(chatId, messageId);
					break;
				case "streak":
					streak(chatId, messageId);
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
				case "":
					break;
					
			}
		});
	} catch (error) {}
}

StartAll();
