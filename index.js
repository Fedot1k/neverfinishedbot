import TelegramBot from "node-telegram-bot-api";

const BotName = `neverfinishedbot`;
const TOKEN = `7279660476:AAGHOLKPGLzGTvMXff4mAYBZ8XnLrQV2e8w`;
const bot = new TelegramBot(TOKEN, { polling: true });

let usersData = [];

bot.setMyCommands([
  {
    command: `/restart`,
    description: `–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üîÑÔ∏è`,
  },
]);

let navtext = `<b>"–¶–µ–ª–∏ üèî"</b> - —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –Ω–∞ –±—É–¥—É—â–µ–µ.\n\n<b>"–ó–∞–º–µ—Ç–∫–∏ ‚ö°"</b> - —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º—ã—Å–ª–µ–π –∏ –∏–¥–µ–π.\n\n<b>"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è"</b> - —Ç–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –±–æ–ª—å—à–∏–µ –ø–æ–±–µ–¥—ã.\n\n<b>"–°–æ–Ω ‚ú®"</b> - –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞ –∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.\n\n<b>"–°–µ—Ä–∏–∏ üî•"</b> - —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.`;

let first_text = `<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> –≤ –º–∏—Ä —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å <b><i>neverfinished!</i></b>\n\n<b>‚Ä¢  –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üíØ</b>\n–í–µ–¥–∏ —É—á–µ—Ç —Å–≤–æ–∏—Ö –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã—Ö <b><i>—Ü–µ–ª–µ–π</i></b> –∏ –≤–µ–ª–∏–∫–∏—Ö <b><i>–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!</i></b>\n\n<b>‚Ä¢  –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ ‚ö°</b>\n–ó–∞–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–∏ <b><i>–º—ã—Å–ª–∏ –∏ –∏–¥–µ–∏</i></b>, –∫–æ—Ç–æ—Ä—ã–µ <b><i>–Ω–µ–ª—å–∑—è –∑–∞–±—ã—Ç—å!</i></b>\n\n<b>‚Ä¢  –û—Ç—á–µ—Ç –ø–æ –ª–∏—á–Ω—ã–º —Ä–µ–∫–æ—Ä–¥–∞–º üî•</b>\n–ü—Ä–æ–∫–∞—á–∏–≤–∞–π <b><i>–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É</i></b>, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–±–µ–¥–Ω—ã–µ —Å–µ—Ä–∏–∏ –Ω–∞–¥ <b><i>—Å–∞–º–∏–º —Å–æ–±–æ–π!</i></b>\n\n<b>‚Ä¢  –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–Ω–∞ ‚ú®</b>\n–£–ª—É—á—à–∞–π —Å–≤–æ–π <b><i>—Ä–µ–∂–∏–º —Å–Ω–∞</i></b> –∏ –ø—Ä–æ–≤–æ–¥–∏ –¥–µ–Ω—å <b><i>—ç–Ω–µ—Ä–≥–∏—á–Ω–µ–µ!</i></b>\n\n<b>üí™ –ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ —Å <i>neverfinished!</i></b>`;

let second_text = `<b>–ö–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º? ü§î</b>\n\n<i><b>*neverfinished</b> –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü§´</i>`;

let sleep_tips_text = `<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ üí§</b>\n\n–ü–µ—Ä–µ–¥ —Å–Ω–æ–º:<blockquote><b>‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω üëÄ</b>\n–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ —Å–∏–Ω–µ–≥–æ —Å–≤–µ—Ç–∞ –Ω–∞—Ä—É—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Ä–∏—Ç–º–æ–≤ —Å–Ω–∞\n\n<b>‚Ä¢ –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å üìö</b>\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ª–∏—à–Ω–∏—Ö –º—ã—Å–ª–µ–π –∏ –ª—É—á—à–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å\n\n<b>‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ç–µ–º–Ω–æ—Ç—É üåô</b>\n–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —Ö–æ—Ä–æ—à–µ–º—É —Å–Ω—É</blockquote>\n\n–ü–æ—Å–ª–µ —Å–Ω–∞:<blockquote><b>‚Ä¢ –í—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã üíß</b>\n–≠—Ç–æ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ —Ç–µ–ª–∞\n\n<b>‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–æ—Ü. —Å–µ—Ç–µ–π üíª</b>\n–≠—Ç–æ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –≤–∞—à —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç–º\n\n<b>‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –∑–∞—Ä—è–¥–∫—É üßò</b>\n–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–º –∏ –¥–µ–ª–∞–µ—Ç –≤–∞—Å —ç–Ω–µ—Ä–≥–∏—á–Ω–µ–µ</blockquote>`;

async function first(chatId, stage = 1) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (stage) {
      case 1:
        await bot
          .sendMessage(chatId, first_text, {
            parse_mode: `HTML`,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[{ text: `–î–∞–ª–µ–µ‚û°Ô∏è`, callback_data: `introNext` }]],
            },
          })
          .then((message) => {
            dataAboutUser.messageId = message.message_id;
            dataAboutUser.action = `intro`;
          });
        break;
      case 2:
        await bot.editMessageText(first_text, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `–î–∞–ª–µ–µ‚û°Ô∏è`, callback_data: `introNext` }]],
          },
        });
        dataAboutUser.action = `intro`;
        break;
      case 3:
        await bot.editMessageText(second_text, {
          parse_mode: `HTML`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `–û—Å—Ç–∞–≤–∏—Ç—å ${dataAboutUser.TelegramUsername} ‚úÖ`,
                  callback_data: `leaveName`,
                },
              ],
              [{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `introBack` }],
            ],
          },
        });
        dataAboutUser.action = `setLogin`;
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function menu(chatId, stage = 1, navActive = false) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  const current_time = new Date().getHours();
  let hello_text = `–î–æ–±—Ä—ã–π –¥–µ–Ω—å`;

  if (current_time >= 5 && current_time <= 10) {
    hello_text = `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ`;
  } else if (current_time >= 11 && current_time <= 16) {
    hello_text = `–î–æ–±—Ä—ã–π –¥–µ–Ω—å`;
  } else if (current_time >= 17 && current_time <= 22) {
    hello_text = `–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä`;
  } else if (current_time > 22 || current_time < 5) {
    hello_text = `–î–æ–±—Ä–æ–π –Ω–æ—á–∏`;
  }

  try {
    switch (stage) {
      case 1:
        await bot.editMessageText(`<b>${hello_text}, ${dataAboutUser.login}! üíØ</b>\n\n<b>–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?</b>\n\n${navActive ? `<blockquote>${navtext}</blockquote>\n\n<a href="https://t.me/${BotName}/?start=hideNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚áß</a>` : `<a href="https://t.me/${BotName}/?start=showNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</a>`}`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `–¶–µ–ª–∏ üèî`, callback_data: `goal` },
                { text: `–ó–∞–º–µ—Ç–∫–∏ ‚ö°`, callback_data: `note` },
              ],
              [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `achiv` }],
              [
                { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
                { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streak` },
              ],
            ],
          },
        });
        dataAboutUser.action = `menu`;
        break;
      case 2:
        if (dataAboutUser.loginOver) {
          await bot
            .sendMessage(chatId, `<b>${hello_text}, ${dataAboutUser.login}! üíØ</b>\n\n<b>–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?</b>\n\n<a href="https://t.me/${BotName}/?start=showNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</a>`, {
              parse_mode: `HTML`,
              disable_web_page_preview: true,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: `–¶–µ–ª–∏ üèî`, callback_data: `goal` },
                    { text: `–ó–∞–º–µ—Ç–∫–∏ ‚ö°`, callback_data: `note` },
                  ],
                  [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `achiv` }],
                  [
                    { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
                    { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streak` },
                  ],
                ],
              },
            })
            .then((message) => {
              dataAboutUser.messageId = message.message_id;
              dataAboutUser.action = `menu`;
            });
        }
        break;
      case 3:
        await bot.editMessageText(`<b>–ü—Ä–∏–≤–µ—Ç, ${dataAboutUser.login}! ü§ò</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–¢–µ–±—è –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –º–µ–Ω—é <i><b>neverfinished!</b></i>\n\n<a href="https://t.me/${BotName}/?start=showNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</a>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `–¶–µ–ª–∏ üèî`, callback_data: `goal` },
                { text: `–ó–∞–º–µ—Ç–∫–∏ ‚ö°`, callback_data: `note` },
              ],
              [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `achiv` }],
              [
                { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
                { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streak` },
              ],
            ],
          },
        });
        dataAboutUser.action = `menu`;
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function goal(chatId, stage = 1) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
  let showText = ``;

  for (let i = 1; i <= dataAboutUser.goalData.title.length; i++) {
    showText += `${dataAboutUser.supportiveCount == i ? `\n\n${dataAboutUser.goalData.marker[i - 1] == 1 ? `‚Ä¢ <s>${i}. ${dataAboutUser.goalData.title[i - 1]}</s> ‚Ä¢` : `‚Ä¢ ${i}. ${dataAboutUser.goalData.title[i - 1]} ‚Ä¢`}\n<blockquote>${dataAboutUser.goalData.text[i - 1]}</blockquote>` : `\n\n${dataAboutUser.goalData.marker[i - 1] == 1 ? `<s>${i}. ${dataAboutUser.goalData.title[i - 1]}</s>` : `${i}. ${dataAboutUser.goalData.title[i - 1]}`}`}`;
  }

  try {
    switch (stage) {
      case 1:
        await bot.editMessageText(`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏, ${dataAboutUser.login} üèî</b>${showText}\n\n<a href="https://t.me/${BotName}/?start=goalMarkDone">–û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π</a>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `üîº`, callback_data: `goalPageBack` },
                { text: `‚Ä¢ ‚Ññ  ${dataAboutUser.supportiveCount}‚Ä¢`, callback_data: `goalCur` },
                { text: `üîΩ`, callback_data: `goalPageNext` },
              ],
              [
                { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                { text: `–î–æ–±–∞–≤–∏—Ç—å`, callback_data: `goalAdd` },
              ],
            ],
          },
        });
        dataAboutUser.action = `goal`;
        break;
      case 2:
        await bot.editMessageText(`–¶–µ–ª—å: <b>${dataAboutUser.supportiveCount}. üèî\n\n${dataAboutUser.goalData.marker[dataAboutUser.supportiveCount - 1] == 1 ? `‚Ä¢ <s>${dataAboutUser.goalData.title[dataAboutUser.supportiveCount - 1]}</s> ‚Ä¢` : `‚Ä¢ ${dataAboutUser.goalData.title[dataAboutUser.supportiveCount - 1]} ‚Ä¢`}</b>\n<blockquote>${dataAboutUser.goalData.text[dataAboutUser.supportiveCount - 1]}</blockquote>\n\n<a href="https://t.me/${BotName}/?start=goalMarkDone">–û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π</a>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `–ò–∑–º–µ–Ω–∏—Ç—å`, callback_data: `goalEdit` },
                { text: `–£–¥–∞–ª–∏—Ç—å`, callback_data: `goalDelete` },
              ],
              [{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `goalBack` }],
            ],
          },
        });
        dataAboutUser.action = `goalAbout`;
        break;
      case 3:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ <u>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏</u> üëÄ\n\n–ü—Ä–∏–º–µ—Ä:</b> –ü–æ–±—ã–≤–∞—Ç—å –≤ –Ø–ø–æ–Ω–∏–∏ üå∏`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `goalBack` }]],
          },
        });
        dataAboutUser.action = `goalAddTitle`;
        break;
      case 4:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ <u>–æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏</u> üëÄ\n\n–ü—Ä–∏–º–µ—Ä:</b> –ò–∑—É—á–∏—Ç—å –ö—É–Ω–≥-–§—É ‚õ©Ô∏è`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `goalBackProtect` }]],
          },
        });
        dataAboutUser.action = `goalAddText`;
        break;
      case 5:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ <u>–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏</u> üëÄ\n\n–ü—Ä–∏–º–µ—Ä:</b> –ü–æ—Å–µ—Ç–∏—Ç—å –∫–æ–Ω—Ü–µ—Ä—Ç Cactus Jack üåµ`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `goalBackCur` },
                { text: `–ù–µ –º–µ–Ω—è—Ç—å ‚úÖ`, callback_data: `goalNotEditTitle` },
              ],
            ],
          },
        });
        dataAboutUser.action = `goalEditTitle`;
        break;
      case 6:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ <u>–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏</u> üëÄ\n\n–ü—Ä–∏–º–µ—Ä:</b> –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –¢—Ä–µ–≤–∏—Å–æ–º ü™ê`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `goalBackCur` },
                { text: `–ù–µ –º–µ–Ω—è—Ç—å ‚úÖ`, callback_data: `goalNotEditText` },
              ],
            ],
          },
        });
        dataAboutUser.action = `goalEditText`;
        break;
      case 7:
        await bot.editMessageText(`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏, ${dataAboutUser.login} üèî</b>\n\n<blockquote>Dreams are not what you see in your sleep. They are the things that dont let you sleep.</blockquote> ~ Cristiano Ronaldo üáµüáπ`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                { text: `–î–æ–±–∞–≤–∏—Ç—å`, callback_data: `goalAdd` },
              ],
            ],
          },
        });
        dataAboutUser.action = `goal`;
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function note(chatId, stage = 1) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
  let showText = ``;

  for (let i = 1; i <= dataAboutUser.noteData.title.length; i++) {
    showText += `${dataAboutUser.supportiveCount == i ? `\n\n${dataAboutUser.noteData.marker[i - 1] == 1 ? `‚Ä¢ <s>${i}. ${dataAboutUser.noteData.title[i - 1]}</s> ‚Ä¢` : `‚Ä¢ ${i}. ${dataAboutUser.noteData.title[i - 1]} ‚Ä¢`}\n<blockquote>${dataAboutUser.noteData.text[i - 1]}</blockquote>` : `\n\n${dataAboutUser.noteData.marker[i - 1] == 1 ? `<s>${i}. ${dataAboutUser.noteData.title[i - 1]}</s>` : `${i}. ${dataAboutUser.noteData.title[i - 1]}`}`}`;
  }

  try {
    switch (stage) {
      case 1:
        await bot.editMessageText(`<b>–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏, ${dataAboutUser.login} ‚ö°</b>${showText}\n\n<a href="https://t.me/${BotName}/?start=noteMarkDone">–û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π</a>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `üîº`, callback_data: `notePageBack` },
                { text: `‚Ä¢ ‚Ññ  ${dataAboutUser.supportiveCount}‚Ä¢`, callback_data: `noteCur` },
                { text: `üîΩ`, callback_data: `notePageNext` },
              ],
              [
                { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                { text: `–î–æ–±–∞–≤–∏—Ç—å`, callback_data: `noteAdd` },
              ],
            ],
          },
        });
        dataAboutUser.action = `note`;
        break;
      case 2:
        await bot.editMessageText(`–ó–∞–º–µ—Ç–∫–∞: <b>${dataAboutUser.supportiveCount}. ‚ö°\n\n${dataAboutUser.noteData.marker[dataAboutUser.supportiveCount - 1] == 1 ? `‚Ä¢ <s>${dataAboutUser.noteData.title[dataAboutUser.supportiveCount - 1]}</s> ‚Ä¢` : `‚Ä¢ ${dataAboutUser.noteData.title[dataAboutUser.supportiveCount - 1]} ‚Ä¢`}</b>\n<blockquote>${dataAboutUser.noteData.text[dataAboutUser.supportiveCount - 1]}</blockquote>\n\n<a href="https://t.me/${BotName}/?start=noteMarkDone">–û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π</a>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `–ò–∑–º–µ–Ω–∏—Ç—å`, callback_data: `noteEdit` },
                { text: `–£–¥–∞–ª–∏—Ç—å`, callback_data: `noteDelete` },
              ],
              [{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `noteBack` }],
            ],
          },
        });
        dataAboutUser.action = `noteAbout`;
        break;
      case 3:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ <u>–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏</u> üëÄ\n\n–ü—Ä–∏–º–µ—Ä:</b> –ü–æ–∫–∞ –Ω–µ—Ç ‚öôÔ∏è`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `noteBack` }]],
          },
        });
        dataAboutUser.action = `noteAddTitle`;
        break;
      case 4:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ <u>–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏</u> üëÄ\n\n–ü—Ä–∏–º–µ—Ä:</b> –ü–æ–∫–∞ –Ω–µ—Ç ‚öôÔ∏è`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `noteBackProtect` }]],
          },
        });
        dataAboutUser.action = `noteAddText`;
        break;
      case 5:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ <u>–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏</u> üëÄ\n\n–ü—Ä–∏–º–µ—Ä:</b> –ü–æ–∫–∞ –Ω–µ—Ç ‚öôÔ∏è`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `noteBackCur` },
                { text: `–ù–µ –º–µ–Ω—è—Ç—å ‚úÖ`, callback_data: `noteNotEditTitle` },
              ],
            ],
          },
        });
        dataAboutUser.action = `noteEditTitle`;
        break;
      case 6:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ <u>–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏</u> üëÄ\n\n–ü—Ä–∏–º–µ—Ä:</b> –ü–æ–∫–∞ –Ω–µ—Ç ‚öôÔ∏è`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `noteBackCur` },
                { text: `–ù–µ –º–µ–Ω—è—Ç—å ‚úÖ`, callback_data: `noteNotEditText` },
              ],
            ],
          },
        });
        dataAboutUser.action = `noteEditText`;
        break;
      case 7:
        await bot.editMessageText(`<b>–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏, ${dataAboutUser.login} ‚ö°</b>\n\n<blockquote>Dont let small obstacles get in the way of being victorious. Remember you are stronger than the challenges you face.</blockquote> ~ Cristiano Ronaldo üáµüáπ`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                { text: `–î–æ–±–∞–≤–∏—Ç—å`, callback_data: `noteAdd` },
              ],
            ],
          },
        });
        dataAboutUser.action = `note`;
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function achiv(chatId, stage = 1) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
  let showText = ``;

  for (let i = 1; i <= dataAboutUser.achivData.title.length; i++) {
    showText += `${dataAboutUser.supportiveCount == i ? `\n\n${dataAboutUser.achivData.marker[i - 1] == 1 ? `‚Ä¢ <u>${i}. ${dataAboutUser.achivData.title[i - 1]}</u> ‚Ä¢` : `‚Ä¢ ${i}. ${dataAboutUser.achivData.title[i - 1]} ‚Ä¢`}\n<blockquote>${dataAboutUser.achivData.text[i - 1]}</blockquote>` : `\n\n${dataAboutUser.achivData.marker[i - 1] == 1 ? `<s>${i}. ${dataAboutUser.achivData.title[i - 1]}</s>` : `${i}. ${dataAboutUser.achivData.title[i - 1]}`}`}`;
  }

  try {
    switch (stage) {
      case 1:
        await bot.editMessageText(`<b>–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, ${dataAboutUser.login} üéñÔ∏è</b>${showText}\n\n<a href="https://t.me/${BotName}/?start=achivMarkDone">–û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π</a>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `üîº`, callback_data: `achivPageBack` },
                { text: `‚Ä¢ ‚Ññ  ${dataAboutUser.supportiveCount}‚Ä¢`, callback_data: `achivCur` },
                { text: `üîΩ`, callback_data: `achivPageNext` },
              ],
              [
                { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                { text: `–î–æ–±–∞–≤–∏—Ç—å`, callback_data: `achivAdd` },
              ],
            ],
          },
        });
        dataAboutUser.action = `achiv`;
        break;
      case 2:
        await bot.editMessageText(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: <b>${dataAboutUser.supportiveCount}. üéñÔ∏è\n\n${dataAboutUser.achivData.marker[dataAboutUser.supportiveCount - 1] == 1 ? `‚Ä¢ <u>${dataAboutUser.achivData.title[dataAboutUser.supportiveCount - 1]}</u> ‚Ä¢` : `‚Ä¢ ${dataAboutUser.achivData.title[dataAboutUser.supportiveCount - 1]} ‚Ä¢`}</b>\n<blockquote>${dataAboutUser.achivData.text[dataAboutUser.supportiveCount - 1]}</blockquote>\n\n<a href="https://t.me/${BotName}/?start=achivMarkDone">–û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π</a>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `–ò–∑–º–µ–Ω–∏—Ç—å`, callback_data: `achivEdit` },
                { text: `–£–¥–∞–ª–∏—Ç—å`, callback_data: `achivDelete` },
              ],
              [{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `achivBack` }],
            ],
          },
        });
        dataAboutUser.action = `achivAbout`;
        break;
      case 3:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ <u>–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</u> üëÄ\n\n–ü—Ä–∏–º–µ—Ä:</b> –ü–æ–∫–∞ –Ω–µ—Ç ‚öôÔ∏è`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `achivBack` }]],
          },
        });
        dataAboutUser.action = `achivAddTitle`;
        break;
      case 4:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ <u>–æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</u> üëÄ\n\n–ü—Ä–∏–º–µ—Ä:</b> –ü–æ–∫–∞ –Ω–µ—Ç ‚öôÔ∏è`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `achivBackProtect` }]],
          },
        });
        dataAboutUser.action = `achivAddText`;
        break;
      case 5:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ <u>–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</u> üëÄ\n\n–ü—Ä–∏–º–µ—Ä:</b> –ü–æ–∫–∞ –Ω–µ—Ç ‚öôÔ∏è`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `achivBackCur` },
                { text: `–ù–µ –º–µ–Ω—è—Ç—å ‚úÖ`, callback_data: `achivNotEditTitle` },
              ],
            ],
          },
        });
        dataAboutUser.action = `achivEditTitle`;
        break;
      case 6:
        await bot.editMessageText(`<b>–í–≤–µ–¥–∏—Ç–µ <u>–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</u> üëÄ\n\n–ü—Ä–∏–º–µ—Ä:</b> –ü–æ–∫–∞ –Ω–µ—Ç ‚öôÔ∏è`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `achivBackCur` },
                { text: `–ù–µ –º–µ–Ω—è—Ç—å ‚úÖ`, callback_data: `achivNotEditText` },
              ],
            ],
          },
        });
        dataAboutUser.action = `achivEditText`;
        break;
      case 7:
        await bot.editMessageText(`<b>–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, ${dataAboutUser.login} üéñÔ∏è</b>\n\n<blockquote>I dont follow records. Records follow me.</blockquote> ~ Cristiano Ronaldo üáµüáπ`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                { text: `–î–æ–±–∞–≤–∏—Ç—å`, callback_data: `achivAdd` },
              ],
            ],
          },
        });
        dataAboutUser.action = `achiv`;
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function sleep(chatId, stage = 1, time = null) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (stage) {
      case 1:
        await bot.editMessageText(`<b>–¢–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞, ${dataAboutUser.login} ‚ú®</b>\n\n–í—Ä–µ–º—è –∑–∞—Å—ã–ø–∞–Ω–∏—è: <b>${dataAboutUser.sleepData.sleepAt}</b>\n–í—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞: <b>${dataAboutUser.sleepData.wakeAt}</b>\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∞: <b>${dataAboutUser.sleepData.dur} üò¥</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [{ text: `–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ ‚åö`, callback_data: `sleepEdit` }],
              [
                { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
                { text: `–°–æ–≤–µ—Ç—ã ‚ÅâÔ∏è`, callback_data: `sleepTips` },
              ],
            ],
          },
        });
        dataAboutUser.action = `sleep`;
        break;
      case 2:
        await bot.editMessageText(`<b>–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –∏–¥–µ—à—å —Å–ø–∞—Ç—å? ü§î</b>\n\n–ü—Ä–∏–º–µ—Ä: <code>22:30</code>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `sleepBack` }]],
          },
        });
        dataAboutUser.action = `addSleepAt`;
        break;
      case 3:
        await bot.editMessageText(`<b>–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è? ü§î</b>\n\n–ü—Ä–∏–º–µ—Ä: <code>6:30</code>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `sleepBack` }]],
          },
        });
        dataAboutUser.action = `addWakeAt`;
        break;
      case 4:
        await bot.editMessageText(sleep_tips_text, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `sleepBack` }]],
          },
        });
        dataAboutUser.action = `sleep`;
        break;
      case 5:
        if (!/[a-z]/i.test(time) && time.includes(":")) {
          time = time.replace(/\s/g, "");
          let parse = time.split(":");

          if (parse[1].length === 2 && Number(parse[0]) >= 0 && Number(parse[0]) <= 23 && Number(parse[1]) >= 0 && Number(parse[1]) <= 59) {
            dataAboutUser.sleepData.sleepAt = parse[0] + ":" + parse[1];

            if (dataAboutUser.sleepData.wakeAt != `-`) {
              let h1 = Number(dataAboutUser.sleepData.sleepAt.split(":")[0]);
              let m1 = Number(dataAboutUser.sleepData.sleepAt.split(":")[1]);
              let h2 = Number(dataAboutUser.sleepData.wakeAt.split(":")[0]);
              let m2 = Number(dataAboutUser.sleepData.wakeAt.split(":")[1]);

              let dur = 0;

              if (h1 > h2) {
                dur = 1440 - h1 * 60 - m1 + (h2 * 60 + m2);
              } else if (h1 < h2) {
                dur = h2 * 60 + m2 - (h1 * 60 + m1);
              } else if (h1 == h2 && m1 < m2) {
                dur = m2 - m1;
              } else if (h1 == h2 && m1 > m2) {
                dur = 1440 - h1 * 60 - m1 + (h2 * 60 + m2);
              }

              dataAboutUser.sleepData.dur = `${(dur - (dur % 60)) / 60}:${dur % 60 < 10 ? `0` : ``}${dur % 60}`;
            }

            sleep(chatId, 3);
          } else {
            sleep(chatId, 7);
          }
        } else {
          sleep(chatId, 7);
        }
        break;
      case 6:
        if (!/[a-z]/i.test(time) && time.includes(":")) {
          time = time.replace(/\s/g, "");
          let parse = time.split(":");

          if (parse[1].length === 2 && Number(parse[0]) >= 0 && Number(parse[0]) <= 23 && Number(parse[1]) >= 0 && Number(parse[1]) <= 59) {
            dataAboutUser.sleepData.wakeAt = parse[0] + ":" + parse[1];

            let h1 = Number(dataAboutUser.sleepData.sleepAt.split(":")[0]);
            let m1 = Number(dataAboutUser.sleepData.sleepAt.split(":")[1]);
            let h2 = Number(dataAboutUser.sleepData.wakeAt.split(":")[0]);
            let m2 = Number(dataAboutUser.sleepData.wakeAt.split(":")[1]);

            let dur = 0;

            if (h1 > h2) {
              dur = 1440 - h1 * 60 - m1 + (h2 * 60 + m2);
            } else if (h1 < h2) {
              dur = h2 * 60 + m2 - (h1 * 60 + m1);
            } else if (h1 == h2 && m1 < m2) {
              dur = m2 - m1;
            } else if (h1 == h2 && m1 > m2) {
              dur = 1440 - h1 * 60 - m1 + (h2 * 60 + m2);
            }

            dataAboutUser.sleepData.dur = `${(dur - (dur % 60)) / 60}:${dur % 60 < 10 ? `0` : ``}${dur % 60}`;

            sleep(chatId);
          } else {
            sleep(chatId, 8);
          }
        } else {
          sleep(chatId, 8);
        }
        break;
      case 7:
        await bot.editMessageText(`<b>–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –∏–¥–µ—à—å —Å–ø–∞—Ç—å? ü§î</b>\n\n–ü—Ä–∏–º–µ—Ä: <code>22:30</code>\n\n<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ü´§</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `sleepBack` }]],
          },
        });
        dataAboutUser.action = `addSleepAt`;
        break;
      case 8:
        await bot.editMessageText(`<b>–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è? ü§î</b>\n\n–ü—Ä–∏–º–µ—Ä: <code>6:30</code>\n\n<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ü´§</b>`, {
          parse_mode: `html`,
          chat_id: chatId,
          message_id: dataAboutUser.messageId,
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [[{ text: `‚¨ÖÔ∏è –ù–∞–∑–∞–¥`, callback_data: `sleepBack` }]],
          },
        });
        dataAboutUser.action = `addWakeAt`;
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function streak(chatId, stage = 1) {}

async function StartAll() {
  bot.on(`message`, async (message) => {
    let text = message.text;
    let chatId = message.chat.id;
    let usermessage = message.message_id;

    try {
      if (!usersData.find((obj) => obj.chatId == chatId)) {
        usersData.push({
          chatId: chatId,
          login: null,
          TelegramUsername: message.from.first_name,
          messageId: null,
          action: null,
          loginOver: false,
          supportiveCount: 1,

          goalData: { title: [], text: [], marker: [] },

          noteData: { title: [], text: [], marker: [] },

          achivData: { title: [], text: [], marker: [] },

          streakData: { title: [], dur: [], marker: [], record: [] },

          sleepData: { dur: 0, sleepAt: `-`, wakeAt: `-` },
        });
      }

      const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

      switch (text) {
        case `/start`:
          first(chatId);
          break;
        case `/restart`:
          menu(chatId, 2);
          break;
        case `/start showNav`:
          menu(chatId, 1, true);
          break;
        case `/start hideNav`:
          menu(chatId);
          break;
        case `/start goalMarkDone`:
          dataAboutUser.goalData.marker[dataAboutUser.supportiveCount - 1] = 1 - dataAboutUser.goalData.marker[dataAboutUser.supportiveCount - 1];
          goal(chatId);
          break;
        case `/start noteMarkDone`:
          dataAboutUser.noteData.marker[dataAboutUser.supportiveCount - 1] = 1 - dataAboutUser.noteData.marker[dataAboutUser.supportiveCount - 1];
          note(chatId);
          break;
        case `/start achivMarkDone`:
          dataAboutUser.achivData.marker[dataAboutUser.supportiveCount - 1] = 1 - dataAboutUser.achivData.marker[dataAboutUser.supportiveCount - 1];
          achiv(chatId);
          break;
      }

      if (dataAboutUser.action == `setLogin` && Array.from(text)[0] != "/") {
        dataAboutUser.login = text;
        dataAboutUser.loginOver = true;
        menu(chatId, 3);
      } else if (dataAboutUser.action == `addSleepAt`) {
        sleep(chatId, 5, text);
      } else if (dataAboutUser.action == `addWakeAt`) {
        sleep(chatId, 6, text);
      } else if (dataAboutUser.action == `goalAddTitle`) {
        dataAboutUser.goalData.title.push(text);
        dataAboutUser.goalData.marker.push(0);
        goal(chatId, 4);
      } else if (dataAboutUser.action == `goalAddText`) {
        dataAboutUser.goalData.text.push(text);
        `${dataAboutUser.goalData.title.length >= 1 ? goal(chatId) : goal(chatId, 7)}`;
      } else if (dataAboutUser.action == `goalEditTitle`) {
        dataAboutUser.goalData.title[dataAboutUser.supportiveCount - 1] = text;
        goal(chatId, 6);
      } else if (dataAboutUser.action == `goalEditText`) {
        dataAboutUser.goalData.text[dataAboutUser.supportiveCount - 1] = text;
        goal(chatId, 2);
      } else if (dataAboutUser.action == `noteAddTitle`) {
        dataAboutUser.noteData.title.push(text);
        dataAboutUser.noteData.marker.push(0);
        note(chatId, 4);
      } else if (dataAboutUser.action == `noteAddText`) {
        dataAboutUser.noteData.text.push(text);
        `${dataAboutUser.noteData.title.length >= 1 ? note(chatId) : note(chatId, 7)}`;
      } else if (dataAboutUser.action == `noteEditTitle`) {
        dataAboutUser.noteData.title[dataAboutUser.supportiveCount - 1] = text;
        note(chatId, 6);
      } else if (dataAboutUser.action == `noteEditText`) {
        dataAboutUser.noteData.text[dataAboutUser.supportiveCount - 1] = text;
        note(chatId, 2);
      } else if (dataAboutUser.action == `achivAddTitle`) {
        dataAboutUser.achivData.title.push(text);
        dataAboutUser.achivData.marker.push(0);
        achiv(chatId, 4);
      } else if (dataAboutUser.action == `achivAddText`) {
        dataAboutUser.achivData.text.push(text);
        `${dataAboutUser.achivData.title.length >= 1 ? achiv(chatId) : achiv(chatId, 7)}`;
      } else if (dataAboutUser.action == `achivEditTitle`) {
        dataAboutUser.achivData.title[dataAboutUser.supportiveCount - 1] = text;
        achiv(chatId, 6);
      } else if (dataAboutUser.action == `achivEditText`) {
        dataAboutUser.achivData.text[dataAboutUser.supportiveCount - 1] = text;
        achiv(chatId, 2);
      }

      bot.deleteMessage(chatId, usermessage);
    } catch (error) {}
  });

  bot.on(`callback_query`, async (query) => {
    let chatId = query.message.chat.id;
    let data = query.data;

    const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

    try {
      switch (data) {
        // Menu And Introduction

        case `menu`:
          menu(chatId);
          break;
        case `introNext`:
          first(chatId, 3);
          break;
        case `introBack`:
          first(chatId, 2);
          break;
        case `leaveName`:
          dataAboutUser.login = dataAboutUser.TelegramUsername;
          dataAboutUser.loginOver = true;
          menu(chatId, 3);
          break;

        // Head Buttons

        case `goal`:
          dataAboutUser.supportiveCount = 1;
          `${dataAboutUser.goalData.title.length >= 1 ? dataAboutUser.supportiveCount == 1 : dataAboutUser.supportiveCount == 0}`;
          `${dataAboutUser.goalData.title.length >= 1 ? goal(chatId) : goal(chatId, 7)}`;
          break;
        case `note`:
          dataAboutUser.supportiveCount = 1;
          `${dataAboutUser.noteData.title.length >= 1 ? dataAboutUser.supportiveCount == 1 : dataAboutUser.supportiveCount == 0}`;
          `${dataAboutUser.noteData.title.length >= 1 ? note(chatId) : note(chatId, 7)}`;
          break;
        case `achiv`:
          dataAboutUser.supportiveCount = 1;
          `${dataAboutUser.achivData.title.length >= 1 ? dataAboutUser.supportiveCount == 1 : dataAboutUser.supportiveCount == 0}`;
          `${dataAboutUser.achivData.title.length >= 1 ? achiv(chatId) : achiv(chatId, 7)}`;
          break;
        case `streak`:
          dataAboutUser.supportiveCount = 1;
          `${dataAboutUser.streakData.title.length >= 1 ? dataAboutUser.supportiveCount == 1 : dataAboutUser.supportiveCount == 0}`;
          `${dataAboutUser.streakData.title.length >= 1 ? streak(chatId) : streak(chatId, 7)}`;
          break;
        case `sleep`:
          sleep(chatId);
          break;

        // Goal Button

        case `goalBackProtect`:
          dataAboutUser.goalData.text.push(`–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è`);
          `${dataAboutUser.goalData.title.length >= 1 ? goal(chatId) : goal(chatId, 7)}`;
          break;
        case `goalCur`:
          `${dataAboutUser.goalData.title.length != 0 ? goal(chatId, 2) : 0}`;
          break;
        case `goalAdd`:
          goal(chatId, 3);
          break;
        case `goalDelete`:
          dataAboutUser.goalData.title.splice(dataAboutUser.supportiveCount - 1, 1);
          dataAboutUser.goalData.text.splice(dataAboutUser.supportiveCount - 1, 1);
          dataAboutUser.goalData.marker.splice(dataAboutUser.supportiveCount - 1, 1);
          `${dataAboutUser.supportiveCount == dataAboutUser.goalData.title.length + 1 && dataAboutUser.supportiveCount != 1 ? (dataAboutUser.supportiveCount -= 1) : 0}`;
          `${dataAboutUser.goalData.title.length >= 1 ? goal(chatId) : goal(chatId, 7)}`;
          break;
        case `goalEdit`:
          goal(chatId, 5);
          break;
        case `goalPageNext`:
          if (dataAboutUser.supportiveCount == dataAboutUser.goalData.title.length) {
            dataAboutUser.supportiveCount = 1;
          } else if (dataAboutUser.supportiveCount < dataAboutUser.goalData.title.length) {
            dataAboutUser.supportiveCount += 1;
          }
          `${dataAboutUser.goalData.title.length >= 1 ? goal(chatId) : goal(chatId, 7)}`;
          break;
        case `goalPageBack`:
          if (dataAboutUser.supportiveCount > 1) {
            dataAboutUser.supportiveCount -= 1;
          } else if (dataAboutUser.supportiveCount == 1 && dataAboutUser.goalData.title.length != 0) {
            dataAboutUser.supportiveCount = dataAboutUser.goalData.title.length;
          }
          `${dataAboutUser.goalData.title.length >= 1 ? goal(chatId) : goal(chatId, 7)}`;
          break;
        case `goalBackCur`:
          goal(chatId, 2);
          break;
        case `goalBack`:
          `${dataAboutUser.goalData.title.length >= 1 ? goal(chatId) : goal(chatId, 7)}`;
          break;
        case `goalNotEditTitle`:
          goal(chatId, 6);
          break;
        case `goalNotEditText`:
          goal(chatId, 2);
          break;

        // Note Button

        case `noteBackProtect`:
          dataAboutUser.noteData.text.push(`–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è`);
          `${dataAboutUser.noteData.title.length >= 1 ? note(chatId) : note(chatId, 7)}`;
          break;
        case `noteCur`:
          `${dataAboutUser.noteData.title.length != 0 ? note(chatId, 2) : 0}`;
          break;
        case `noteAdd`:
          note(chatId, 3);
          break;
        case `noteDelete`:
          dataAboutUser.noteData.title.splice(dataAboutUser.supportiveCount - 1, 1);
          dataAboutUser.noteData.text.splice(dataAboutUser.supportiveCount - 1, 1);
          dataAboutUser.noteData.marker.splice(dataAboutUser.supportiveCount - 1, 1);
          `${dataAboutUser.supportiveCount == dataAboutUser.noteData.title.length + 1 && dataAboutUser.supportiveCount != 1 ? (dataAboutUser.supportiveCount -= 1) : 0}`;
          `${dataAboutUser.noteData.title.length >= 1 ? note(chatId) : note(chatId, 7)}`;
          break;
        case `noteEdit`:
          note(chatId, 5);
          break;
        case `notePageNext`:
          if (dataAboutUser.supportiveCount == dataAboutUser.noteData.title.length) {
            dataAboutUser.supportiveCount = 1;
          } else if (dataAboutUser.supportiveCount < dataAboutUser.noteData.title.length) {
            dataAboutUser.supportiveCount += 1;
          }
          `${dataAboutUser.noteData.title.length >= 1 ? note(chatId) : note(chatId, 7)}`;
          break;
        case `notePageBack`:
          if (dataAboutUser.supportiveCount > 1) {
            dataAboutUser.supportiveCount -= 1;
          } else if (dataAboutUser.supportiveCount == 1 && dataAboutUser.noteData.title.length != 0) {
            dataAboutUser.supportiveCount = dataAboutUser.noteData.title.length;
          }
          `${dataAboutUser.noteData.title.length >= 1 ? note(chatId) : note(chatId, 7)}`;
          break;
        case `noteBackCur`:
          note(chatId, 2);
          break;
        case `noteBack`:
          `${dataAboutUser.noteData.title.length >= 1 ? note(chatId) : note(chatId, 7)}`;
          break;
        case `noteNotEditTitle`:
          note(chatId, 6);
          break;
        case `noteNotEditText`:
          note(chatId, 2);
          break;

        // Achiv Button

        case `achivBackProtect`:
          dataAboutUser.achivData.text.push(`–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è`);
          `${dataAboutUser.achivData.title.length >= 1 ? achiv(chatId) : achiv(chatId, 7)}`;
          break;
        case `achivCur`:
          `${dataAboutUser.achivData.title.length != 0 ? achiv(chatId, 2) : 0}`;
          break;
        case `achivAdd`:
          achiv(chatId, 3);
          break;
        case `achivDelete`:
          dataAboutUser.achivData.title.splice(dataAboutUser.supportiveCount - 1, 1);
          dataAboutUser.achivData.text.splice(dataAboutUser.supportiveCount - 1, 1);
          dataAboutUser.achivData.marker.splice(dataAboutUser.supportiveCount - 1, 1);
          `${dataAboutUser.supportiveCount == dataAboutUser.achivData.title.length + 1 && dataAboutUser.supportiveCount != 1 ? (dataAboutUser.supportiveCount -= 1) : 0}`;
          `${dataAboutUser.achivData.title.length >= 1 ? achiv(chatId) : achiv(chatId, 7)}`;
          break;
        case `achivEdit`:
          achiv(chatId, 5);
          break;
        case `achivPageNext`:
          if (dataAboutUser.supportiveCount == dataAboutUser.achivData.title.length) {
            dataAboutUser.supportiveCount = 1;
          } else if (dataAboutUser.supportiveCount < dataAboutUser.achivData.title.length) {
            dataAboutUser.supportiveCount += 1;
          }
          `${dataAboutUser.achivData.title.length >= 1 ? achiv(chatId) : achiv(chatId, 7)}`;
          break;
        case `achivPageBack`:
          if (dataAboutUser.supportiveCount > 1) {
            dataAboutUser.supportiveCount -= 1;
          } else if (dataAboutUser.supportiveCount == 1 && dataAboutUser.achivData.title.length != 0) {
            dataAboutUser.supportiveCount = dataAboutUser.achivData.title.length;
          }
          `${dataAboutUser.achivData.title.length >= 1 ? achiv(chatId) : achiv(chatId, 7)}`;
          break;
        case `achivBackCur`:
          achiv(chatId, 2);
          break;
        case `achivBack`:
          `${dataAboutUser.achivData.title.length >= 1 ? achiv(chatId) : achiv(chatId, 7)}`;
          break;
        case `achivNotEditTitle`:
          achiv(chatId, 6);
          break;
        case `achivNotEditText`:
          achiv(chatId, 2);
          break;

        // Streak Button

        case `streakBackProtect`:
          dataAboutUser.streakData.text.push(`–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è`);
          `${dataAboutUser.streakData.title.length >= 1 ? streak(chatId) : streak(chatId, 7)}`;
          break;
        case `streakCur`:
          `${dataAboutUser.streakData.title.length != 0 ? streak(chatId, 2) : 0}`;
          break;
        case `streakAdd`:
          streak(chatId, 3);
          break;
        case `streakDelete`:
          dataAboutUser.streakData.title.splice(dataAboutUser.supportiveCount - 1, 1);
          dataAboutUser.streakData.text.splice(dataAboutUser.supportiveCount - 1, 1);
          dataAboutUser.streakData.marker.splice(dataAboutUser.supportiveCount - 1, 1);
          `${dataAboutUser.supportiveCount == dataAboutUser.streakData.title.length + 1 && dataAboutUser.supportiveCount != 1 ? (dataAboutUser.supportiveCount -= 1) : 0}`;
          `${dataAboutUser.streakData.title.length >= 1 ? streak(chatId) : streak(chatId, 7)}`;
          break;
        case `streakEdit`:
          streak(chatId, 5);
          break;
        case `pageNext`:
          if (dataAboutUser.supportiveCount == dataAboutUser.streakData.title.length) {
            dataAboutUser.supportiveCount = 1;
          } else if (dataAboutUser.supportiveCount < dataAboutUser.streakData.title.length) {
            dataAboutUser.supportiveCount += 1;
          }
          `${dataAboutUser.streakData.title.length >= 1 ? streak(chatId) : streak(chatId, 7)}`;
          break;
        case `pageBack`:
          if (dataAboutUser.supportiveCount > 1) {
            dataAboutUser.supportiveCount -= 1;
          } else if (dataAboutUser.supportiveCount == 1 && dataAboutUser.streakData.title.length != 0) {
            dataAboutUser.supportiveCount = dataAboutUser.streakData.title.length;
          }
          `${dataAboutUser.streakData.title.length >= 1 ? streak(chatId) : streak(chatId, 7)}`;
          break;
        case `streakBackCur`:
          streak(chatId, 2);
          break;
        case `streakBack`:
          `${dataAboutUser.streakData.title.length >= 1 ? streak(chatId) : streak(chatId, 7)}`;
          break;
        case `streakNotEditTitle`:
          streak(chatId, 6);
          break;
        case `streakNotEditText`:
          streak(chatId, 2);
          break;

        // Sleep Button

        case `sleepEdit`:
          sleep(chatId, 2);
          break;
        case `sleepBack`:
          sleep(chatId, 1);
          break;
        case `sleepTips`:
          sleep(chatId, 4);
          break;
      }
    } catch (error) {}
  });
}

StartAll();
