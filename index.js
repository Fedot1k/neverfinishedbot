import TelegramBot from "node-telegram-bot-api";

const TOKEN = `7279660476:AAGHOLKPGLzGTvMXff4mAYBZ8XnLrQV2e8w`;
const bot = new TelegramBot(TOKEN, { polling: true });

const FedotId = 870204479;
const BotName = `neverfinishedbot`

let usersData = [];

bot.setMyCommands([
  {
    command: `/restart`,
    description: `–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üîÑÔ∏è`,
  },
]);

let navtext = `<b>"–¶–µ–ª–∏ üèî"</b> - —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –Ω–∞ –±—É–¥—É—â–µ–µ.\n\n<b>"–ó–∞–º–µ—Ç–∫–∏ ‚ö°"</b> - —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º—ã—Å–ª–µ–π –∏ –∏–¥–µ–π.\n\n<b>"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è"</b> - —Ç–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –±–æ–ª—å—à–∏–µ –ø–æ–±–µ–¥—ã.\n\n<b>"–°–æ–Ω ‚ú®"</b> - –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞ –∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.\n\n<b>"–°–µ—Ä–∏–∏ üî•"</b> - —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.`;

let first_text = `<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> –≤ –º–∏—Ä —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å <b><i>neverfinished!</i></b>\n\n<b>‚Ä¢  –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üíØ</b>\n–í–µ–¥–∏ —É—á–µ—Ç —Å–≤–æ–∏—Ö –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã—Ö <b><i>—Ü–µ–ª–µ–π</i></b> –∏ –≤–µ–ª–∏–∫–∏—Ö <b><i>–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!</i></b>\n\n<b>‚Ä¢  –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ ‚ö°</b>\n–ó–∞–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–∏ <b><i>–º—ã—Å–ª–∏ –∏ –∏–¥–µ–∏</i></b>, –∫–æ—Ç–æ—Ä—ã–µ <b><i>–Ω–µ–ª—å–∑—è –∑–∞–±—ã—Ç—å!</i></b>\n\n<b>‚Ä¢  –û—Ç—á–µ—Ç –ø–æ –ª–∏—á–Ω—ã–º —Ä–µ–∫–æ—Ä–¥–∞–º üî•</b>\n–ü—Ä–æ–∫–∞—á–∏–≤–∞–π <b><i>–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É</i></b>, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–±–µ–¥–Ω—ã–µ —Å–µ—Ä–∏–∏ –Ω–∞–¥ <b><i>—Å–∞–º–∏–º —Å–æ–±–æ–π!</i></b>\n\n<b>‚Ä¢  –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–Ω–∞ ‚ú®</b>\n–£–ª—É—á—à–∞–π —Å–≤–æ–π <b><i>—Ä–µ–∂–∏–º —Å–Ω–∞</i></b> –∏ –ø—Ä–æ–≤–æ–¥–∏ –¥–µ–Ω—å <b><i>—ç–Ω–µ—Ä–≥–∏—á–Ω–µ–µ!</i></b>\n\n<b>üí™ –ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ —Å <i>neverfinished!</i></b>`;

let second_text = `<b>–ö–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º? ü§î</b>\n\n<i><b>*neverfinished</b> –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü§´</i>`;





async function loginOver(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
  dataAboutUser.loginOver = true;
}





async function first(chatId, stage = 1) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (stage) {
      case 1:
        await bot
          .sendMessage(
            chatId,
            first_text,
            {
              parse_mode: `HTML`,
              disable_web_page_preview: true,
              reply_markup: 
              {
                inline_keyboard: [[{ text: `–î–∞–ª–µ–µ‚û°Ô∏è`, callback_data: `next` }]],
              },
            }
          )
          .then((message) => {
            dataAboutUser.messageId = message.message_id;
            dataAboutUser.action = `intro`
          });
          break;
      case 2:
        await bot.editMessageText(
          first_text,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.messageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[{ text: `–î–∞–ª–µ–µ‚û°Ô∏è`, callback_data: `next` }]],
            },
          }
        );
        dataAboutUser.action = `intro`
        break;
      case 3:
        await bot.editMessageText(
          second_text,
          {
            parse_mode: `HTML`,
            chat_id: chatId,
            message_id: dataAboutUser.messageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–û—Å—Ç–∞–≤–∏—Ç—å ${dataAboutUser.TelegramUsername} ‚úÖ`,
                    callback_data: `leavename`,
                  },
                ],
                [{ text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`, callback_data: `back` }],
              ],
            },
          }
        );
        dataAboutUser.action = `who`
        break;
    }
  } catch (error) {
    console.log(error);
  }
}

async function menu(chatId, nav = 1) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    switch (nav) {
      case 1:
        await bot.editMessageText(
          `<b>–ü—Ä–∏–≤–µ—Ç, ${dataAboutUser.login}! üíØ</b>\n\n<b>–ö–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?</b>\n\n<a href="https://t.me/${BotName}/?start=showNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</a>`,
          {
            parse_mode: `html`,
            chat_id: chatId,
            message_id: dataAboutUser.messageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `–¶–µ–ª–∏ üèî`, callback_data: `goals` },
                  { text: `–ó–∞–º–µ—Ç–∫–∏ ‚ö°`, callback_data: `notes` },
                ],
                [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `achivs` }],
                [
                  { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
                  { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streaks` },
                ],
              ],
            },
          }
        );
        dataAboutUser.action = `menu`;
        break;
      case 2:
        await bot.editMessageText(
          `<b>–ü—Ä–∏–≤–µ—Ç, ${dataAboutUser.login}! üíØ</b>\n\n<b>–ö–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?</b>\n\n<blockquote>${navtext}</blockquote>\n\n<a href="https://t.me/${BotName}/?start=hideNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚áß</a>`,
          {
            parse_mode: `html`,
            chat_id: chatId,
            message_id: dataAboutUser.messageId,
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: `–¶–µ–ª–∏ üèî`, callback_data: `goals` },
                  { text: `–ó–∞–º–µ—Ç–∫–∏ ‚ö°`, callback_data: `notes` },
                ],
                [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `achivs` }],
                [
                  { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
                  { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streaks` },
                ],
              ],
            },
          }
        );
        dataAboutUser.action = `menu`;
        break;
      case 3:
        if (dataAboutUser.loginOver) {
          await bot
            .sendMessage(
              chatId,
              `<b>–ü—Ä–∏–≤–µ—Ç, ${dataAboutUser.login}! üíØ</b>\n\n<b>–ö–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?</b>\n\n<a href="https://t.me/${BotName}/?start=showNav">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ‚á®</a>`,
              {
                parse_mode: `HTML`,
                disable_web_page_preview: true,
                reply_markup: {
                  inline_keyboard: [
                    [
                      { text: `–¶–µ–ª–∏ üèî`, callback_data: `goals` },
                      { text: `–ó–∞–º–µ—Ç–∫–∏ ‚ö°`, callback_data: `notes` },
                    ],
                    [{ text: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üéñÔ∏è`, callback_data: `achivs` }],
                    [
                      { text: `–°–æ–Ω ‚ú®`, callback_data: `sleep` },
                      { text: `–°–µ—Ä–∏–∏ üî•`, callback_data: `streaks` },
                    ],
                  ],
                },
              }
            )
            .then((message) => {
              dataAboutUser.messageId = message.message_id;
              dataAboutUser.action = `menu`;
            });
          }
          break;
    }
  } catch (error) {
    console.log(error);
  }
}





async function goals(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–¢–≤–æ–∏ —Ü–µ–ª–∏, ${dataAboutUser.login} üèî</b>`, {
      parse_mode: `html`,
      chat_id: chatId,
      message_id: dataAboutUser.messageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [
            { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `page` },
            { text: `–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ`, callback_data: `page` },
          ],
          [
            { text: `–î–æ–±–∞–≤–∏—Ç—å`, callback_data: `add_goal` },
          ],
          [
            { text: `–£–¥–∞–ª–∏—Ç—å`, callback_data: `delete_goal` }
          ],
          [
            { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
            { text: `–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ`, callback_data: `done_goal` },
          ],
        ],
      },
    });
  } catch (error) {
    console.log(error);
  }
}





async function notes(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏, ${dataAboutUser.login} ‚ö°</b>`, {
      parse_mode: `html`,
      chat_id: chatId,
      message_id: dataAboutUser.messageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [
            { text: `+ –î–æ–±–∞–≤–∏—Ç—å +`, callback_data: `add_goal` },
          ],
          [
            { text: `- –£–¥–∞–ª–∏—Ç—å -`, callback_data: `delete_goal` }
          ],
          [
            { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
          ],
        ],
      },
    });
  } catch (error) {
    console.log(error);
  }
}




async function achivs(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, ${dataAboutUser.login} üéñÔ∏è</b>`, {
      parse_mode: `html`,
      chat_id: chatId,
      message_id: dataAboutUser.messageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [
            { text: `+ –î–æ–±–∞–≤–∏—Ç—å +`, callback_data: `add_goal` },
          ],
          [
            { text: `- –£–¥–∞–ª–∏—Ç—å -`, callback_data: `delete_goal` }
          ],
          [
            { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
          ],
        ],
      },
    });
  } catch (error) {
    console.log(error);
  }
}





async function sleep(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–¢–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞, ${dataAboutUser.login} ‚ú®</b>`, {
      parse_mode: `html`,
      chat_id: chatId,
      message_id: dataAboutUser.messageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [
            { text: `+ –î–æ–±–∞–≤–∏—Ç—å +`, callback_data: `add_goal` },
          ],
          [
            { text: `- –£–¥–∞–ª–∏—Ç—å -`, callback_data: `delete_goal` }
          ],
          [
            { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
          ],
        ],
      },
    });
  } catch (error) {
    console.log(error);
  }
}





async function streaks(chatId) {
  const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

  try {
    await bot.editMessageText(`<b>–¢–≤–æ–∏ –ø–æ–±–µ–¥–Ω—ã–µ —Å–µ—Ä–∏–∏, ${dataAboutUser.login} üî•</b>\n\n`, {
      parse_mode: `html`,
      chat_id: chatId,
      message_id: dataAboutUser.messageId,
      disable_web_page_preview: true,
      reply_markup: {
        inline_keyboard: [
          [
            { text: `+ –î–æ–±–∞–≤–∏—Ç—å +`, callback_data: `add_goal` },
          ],
          [
            { text: `- –£–¥–∞–ª–∏—Ç—å -`, callback_data: `delete_goal` }
          ],
          [
            { text: `‚¨ÖÔ∏è –í –º–µ–Ω—é`, callback_data: `menu` },
            { text: `–û—Ç–º–µ—Ç–∏—Ç—å ‚úÖ`, callback_data: `done_goal` },
          ],
        ],
      },
    });
  } catch (error) {
    console.log(error);
  }
}





async function StartAll() {
  try {
    bot.on(`message`, async (message) => {
      let text = message.text;
      let chatId = message.chat.id;
      let usermessage = message.message_id;

      if (!usersData.find((obj) => obj.chatId == chatId)) {
        usersData.push({
          chatId: chatId,
          login: message.from.first_name,
          TelegramUsername: message.from.first_name,
          messageId: null,
          action: null,
          loginOver: false,
        });
      }

      switch (text) {
        case `/start`:
          first(chatId);
          break;
        case `/restart`:
          menu(chatId, 3);
          break;
        case `/start showNav`:
          menu(chatId, 2);
          break;
        case `/start hideNav`:
          menu(chatId);
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
      }

      const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

      if (dataAboutUser.action == `who` && Array.from(text)[0] != "/") {
        dataAboutUser.login = text;
        loginOver(chatId);
        menu(chatId);
      }

      bot.deleteMessage(chatId, usermessage);
      console.log(message);
    });
  } catch (error) {}


  try {
    bot.on(`callback_query`, async (query) => {
      let chatId = query.message.chat.id;
      let data = query.data;

      switch (data) {
        case `menu`:
          menu(chatId);
          break;
        case `goals`:
          goals(chatId);
          break;
        case `notes`:
          notes(chatId);
          break;
        case `achivs`:
          achivs(chatId);
          break;
        case `sleep`:
          sleep(chatId);
          break;
        case `streaks`:
          streaks(chatId);
          break;
        case `next`:
          first(chatId, 3);
          break;
        case `back`:
          first(chatId, 2);
          break;
        case `leavename`:
          loginOver(chatId);
          menu(chatId);
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
        case ``:
          break;
      }
    });
  } catch (error) {}
}

StartAll();